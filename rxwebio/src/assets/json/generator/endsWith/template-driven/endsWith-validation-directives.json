{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-complete-template-driven-validation-directives',\r\n    templateUrl: './ends-with-complete.component.html'\r\n})\r\nexport class EndsWithCompleteTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n\t    <input type=\"text\" name=\"name\" [(ngModel)]=\"user.name\"  class=\"form-control\" [endsWith]=\"{'value':'t'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.name?.errors\">{{userForm.controls.name?.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Task Id</label>\r\n\t    <input type=\"text\" name=\"taskId\" [(ngModel)]=\"user.taskId\"  class=\"form-control\" [endsWith]=\"{'value':'1','conditionalExpression':'x => x.name ==\\'Bharat\\''}\"/>\r\n\r\n      <small class=\"form-text text-muted\">You can enter value which ends with '1'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.taskId?.errors\">{{userForm.controls.taskId?.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Company</label>\r\n\t    <input type=\"text\" name=\"company\" [(ngModel)]=\"user.company\"  class=\"form-control\" [endsWith]=\"{'value':'b','message':'Company does not ends with `b`'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Input should endsWith `b`<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.company?.errors\">{{userForm.controls.company?.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tname: string;\r\n\r\n\tprofession: string;\r\n\r\n\ttaskId: string;\r\n\r\n\tcompany: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"valueExample":{"notes":null,"component":null,"html":null,"model":"[endsWith]=\"{'value':'t'}\"","modelName":null,"jsonName":null,"json":null},"value":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-value-template-driven-validation-directives',\r\n    templateUrl: './ends-with-value.component.html'\r\n})\r\nexport class EndsWithValueTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n\t    <input type=\"text\" name=\"name\" [(ngModel)]=\"user.name\"  class=\"form-control\" [endsWith]=\"{'value':'t'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.name?.errors\">{{userForm.controls.name?.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tname: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"valueExampleFunction":{"notes":null,"component":null,"html":null,"model":"[endsWith]=\"{'value':'r','conditionalExpression':(x,y) => x.name == \\'Bharat\\' }\"","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"[endsWith]=\"{'value':'r','conditionalExpression':(x,y) => x.name == \\'Bharat\\' }\"","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-conditionalExpression-template-driven-validation-directives',\r\n    templateUrl: './ends-with-conditional-expression.component.html'\r\n})\r\nexport class EndsWithConditionalExpressionTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n\t    <input type=\"text\" name=\"name\" [(ngModel)]=\"user.name\"  class=\"form-control\" [endsWith]=\"{'value':'t'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Profession' or 'Task Id', then you need to add 'name' input as 'Bharat'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.name?.errors\">{{userForm.controls.name?.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Task Id</label>\r\n\t    <input type=\"text\" name=\"taskId\" [(ngModel)]=\"user.taskId\"  class=\"form-control\" [endsWith]=\"{'value':'1','conditionalExpression':'x => x.name ==\\'Bharat\\''}\"/>\r\n\r\n      <small class=\"form-text text-muted\">You can enter value which ends with '1'<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Task Id' then you need to add 'name' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.taskId?.errors\">{{userForm.controls.taskId?.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tname: string;\r\n\r\n\ttaskId: string;\r\n\r\n\tprofession: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"valueExampleString":{"notes":null,"component":null,"html":null,"model":"[endsWith]=\"{'value':'1','conditionalExpression':'x => x.name ==\\'Bharat\\''}\"","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"[endsWith]=\"{'value':'1','conditionalExpression':'x => x.name ==\\'Bharat\\''}\"","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"[endsWith]=\"{'value':'b','message':'Company does not ends with `b`'}\"","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-message-template-driven-validation-directives',\r\n    templateUrl: './ends-with-message.component.html'\r\n})\r\nexport class EndsWithMessageTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Company</label>\r\n\t    <input type=\"text\" name=\"company\" [(ngModel)]=\"user.company\"  class=\"form-control\" [endsWith]=\"{'value':'b','message':'Company does not ends with `b`'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">Input should endsWith `b`<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.company?.errors\">{{userForm.controls.company?.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tcompany: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-endsWith-add-template-driven-validation-directives',\r\n    templateUrl: './ends-with-add.component.html'\r\n})\r\nexport class EndsWithAddTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Name</label>\r\n\t    <input type=\"text\" name=\"name\" [(ngModel)]=\"user.name\"  class=\"form-control\" [endsWith]=\"{'value':'t'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">You can enter value which ends with 't'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.name?.errors\">{{userForm.controls.name?.errors.endsWith.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tname: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null}}