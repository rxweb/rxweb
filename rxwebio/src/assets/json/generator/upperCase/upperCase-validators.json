{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-upperCase-complete-validator',\r\n    templateUrl: './upper-case-complete.component.html'\r\n})\r\nexport class UpperCaseCompleteValidatorComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.locationFormGroup = this.formBuilder.group({\r\n            countryName:['', RxwebValidators.upperCase()], \r\n            stateName:['', RxwebValidators.upperCase({conditionalExpression:(x,y) => x.countryName == \"INDIA\"  })], \r\n            cityName:['', RxwebValidators.upperCase({conditionalExpression:'x => x.countryName == \"INDIA\"' })], \r\n            colonyName:['', RxwebValidators.upperCase({message:'You can enter only upperCase letters.' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Enter the 'INDIA' in 'Country Name' or 'City Name' text box to see the validation in 'State Name' text box.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.countryName.errors\">{{locationFormGroup.controls.countryName.errors.upperCase.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of upperCase on 'State Name' field, then enter the value of 'INDIA' in 'Country Name' textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.stateName.errors\">{{locationFormGroup.controls.stateName.errors.upperCase.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Name</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of upperCase on 'City Name' field, then enter the value of 'INDIA' in 'Country Name' textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.cityName.errors\">{{locationFormGroup.controls.cityName.errors.upperCase.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Colony Name</label>\r\n      <input type=\"text\" formControlName=\"colonyName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.colonyName.errors\">{{locationFormGroup.controls.colonyName.errors.upperCase.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.upperCase({conditionalExpression:(x,y) => x.countryName == \"INDIA\"  });\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-upperCase-conditionalExpression-validator',\r\n    templateUrl: './upper-case-conditional-expression.component.html'\r\n})\r\nexport class UpperCaseConditionalExpressionValidatorComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.locationFormGroup = this.formBuilder.group({\r\n            countryName:['', RxwebValidators.upperCase()], \r\n            cityName:['', RxwebValidators.upperCase({conditionalExpression:'x => x.countryName == \"INDIA\"' })], \r\n            stateName:['', RxwebValidators.upperCase({conditionalExpression:(x,y) => x.countryName == \"INDIA\"  })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Enter the 'INDIA' in 'Country Name' or 'City Name' text box to see the validation in 'State Name' text box.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.countryName.errors\">{{locationFormGroup.controls.countryName.errors.upperCase.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Name</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of upperCase on 'City Name' field, then enter the value of 'INDIA' in 'Country Name' textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.cityName.errors\">{{locationFormGroup.controls.cityName.errors.upperCase.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of upperCase on 'State Name' field, then enter the value of 'INDIA' in 'Country Name' textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.stateName.errors\">{{locationFormGroup.controls.stateName.errors.upperCase.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.upperCase({conditionalExpression:'x => x.countryName == \"INDIA\"' });\r\n","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.upperCase({message:'You can enter only upperCase letters.' });\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-upperCase-message-validator',\r\n    templateUrl: './upper-case-message.component.html'\r\n})\r\nexport class UpperCaseMessageValidatorComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.locationFormGroup = this.formBuilder.group({\r\n            colonyName:['', RxwebValidators.upperCase({message:'You can enter only upperCase letters.' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Colony Name</label>\r\n      <input type=\"text\" formControlName=\"colonyName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.colonyName.errors\">{{locationFormGroup.controls.colonyName.errors.upperCase.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-upperCase-dynamic-validator',\r\n    templateUrl: './upper-case-dynamic.component.html'\r\n})\r\nexport class UpperCaseDynamicValidatorComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/upperCase/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar location = { countryName:'', stateName:'', cityName:'', colonyName:'',  }\r\n\t\t\tthis.locationFormGroup = this.formBuilder.group(location,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"locationFormGroup\"  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"   />\r\n      <small class=\"form-text text-muted\">Enter the 'INDIA' in 'Country Name' or 'City Name' text box to see the validation in 'State Name' text box.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.countryName.errors\">{{locationFormGroup.controls.countryName.errors.upperCase.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Name</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">To apply the validation of upperCase on 'City Name' field, then enter the value of 'INDIA' in 'Country Name' textbox.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.cityName.errors\">{{locationFormGroup.controls.cityName.errors.upperCase.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Colony Name</label>\r\n      <input type=\"text\" formControlName=\"colonyName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.colonyName.errors\">{{locationFormGroup.controls.colonyName.errors.upperCase.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":"dynamic.json","json":"{\"countryName\":{\"upperCase\":true},\"cityName\":{\"upperCase\":{\"conditionalExpression\":\"x => x.countryName == \\\"INDIA\\\"\"}},\"colonyName\":{\"upperCase\":{\"message\":\"You can enter only upperCase letters.\"}}}"},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-upperCase-add-validator',\r\n    templateUrl: './upper-case-add.component.html'\r\n})\r\nexport class UpperCaseAddValidatorComponent implements OnInit {\r\n    locationFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.locationFormGroup = this.formBuilder.group({\r\n            countryName:['', RxwebValidators.upperCase()], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"locationFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"locationFormGroup.controls.countryName.errors\">{{locationFormGroup.controls.countryName.errors.upperCase.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null}}