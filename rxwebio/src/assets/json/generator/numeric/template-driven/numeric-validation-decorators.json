{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-complete-template-driven-validation-decorators',\r\n    templateUrl: './numeric-complete.component.html'\r\n})\r\nexport class NumericCompleteTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\t\t\t\tdataTypes = [ \"Real\", \"Integer\",];\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select name=\"dataType\" [(ngModel)]=\"userinfo.dataType\"  class=\"form-control\" >\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.dataType?.errors\">{{userinfoForm.controls.dataType?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n\t    <input type=\"text\" name=\"negativeNumber\" [(ngModel)]=\"userinfo.negativeNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.negativeNumber?.errors\">{{userinfoForm.controls.negativeNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n\t    <input type=\"text\" name=\"decimalNumber\" [(ngModel)]=\"userinfo.decimalNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.decimalNumber?.errors\">{{userinfoForm.controls.decimalNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Real Number</label>\r\n\t    <input type=\"text\" name=\"realNumber\" [(ngModel)]=\"userinfo.realNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.realNumber?.errors\">{{userinfoForm.controls.realNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n\t    <input type=\"text\" name=\"positiveNumber\" [(ngModel)]=\"userinfo.positiveNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.positiveNumber?.errors\">{{userinfoForm.controls.positiveNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t@numeric({acceptValue:NumericValueType.NegativeNumber }) \r\n\tnegativeNumber: number;\r\n\r\n\t@numeric({allowDecimal:true }) \r\n\tdecimalNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Integer\"  }) \r\n\tintegerNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' }) \r\n\trealNumber: number;\r\n\r\n\t@numeric({message:'{{0}} is not a positive number' }) \r\n\tpositiveNumber: number;\r\n\r\n}\r\n","modelName":"user-info.model.ts","jsonName":null,"json":null},"acceptValueExample":{"notes":null,"component":null,"html":null,"model":"@numeric({acceptValue:NumericValueType.NegativeNumber }) \r\nnegativeNumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"acceptValue":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-acceptValue-template-driven-validation-decorators',\r\n    templateUrl: './numeric-accept-value.component.html'\r\n})\r\nexport class NumericAcceptValueTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n\t    <input type=\"text\" name=\"negativeNumber\" [(ngModel)]=\"userinfo.negativeNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.negativeNumber?.errors\">{{userinfoForm.controls.negativeNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numeric, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.NegativeNumber }) \r\n\tnegativeNumber: number;\r\n\r\n}\r\n","modelName":"user-info.model.ts","jsonName":null,"json":null},"allowDecimalExample":{"notes":null,"component":null,"html":null,"model":"@numeric({allowDecimal:true }) \r\ndecimalNumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"allowDecimal":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-allowDecimal-template-driven-validation-decorators',\r\n    templateUrl: './numeric-allow-decimal.component.html'\r\n})\r\nexport class NumericAllowDecimalTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n\t    <input type=\"text\" name=\"decimalNumber\" [(ngModel)]=\"userinfo.decimalNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.decimalNumber?.errors\">{{userinfoForm.controls.decimalNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numeric, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({allowDecimal:true }) \r\n\tdecimalNumber: number;\r\n\r\n}\r\n","modelName":"user-info.model.ts","jsonName":null,"json":null},"acceptValueExampleFunction":{"notes":null,"component":null,"html":null,"model":"@numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Integer\"  }) \r\nintegerNumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Integer\"  }) \r\nintegerNumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-conditionalExpression-template-driven-validation-decorators',\r\n    templateUrl: './numeric-conditional-expression.component.html'\r\n})\r\nexport class NumericConditionalExpressionTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\t\t\t\tdataTypes = [ \"Real\", \"Integer\",];\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select name=\"dataType\" [(ngModel)]=\"userinfo.dataType\"  class=\"form-control\" >\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.dataType?.errors\">{{userinfoForm.controls.dataType?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Real Number</label>\r\n\t    <input type=\"text\" name=\"realNumber\" [(ngModel)]=\"userinfo.realNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.realNumber?.errors\">{{userinfoForm.controls.realNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numeric,prop, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@prop()\r\n\tdataType: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' }) \r\n\trealNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Integer\"  }) \r\n\tintegerNumber: number;\r\n\r\n}\r\n","modelName":"user-info.model.ts","jsonName":null,"json":null},"acceptValueExampleString":{"notes":null,"component":null,"html":null,"model":"@numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' }) \r\nrealNumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' }) \r\nrealNumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"@numeric({message:'{{0}} is not a positive number' }) \r\npositiveNumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-message-template-driven-validation-decorators',\r\n    templateUrl: './numeric-message.component.html'\r\n})\r\nexport class NumericMessageTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n\t    <input type=\"text\" name=\"positiveNumber\" [(ngModel)]=\"userinfo.positiveNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.positiveNumber?.errors\">{{userinfoForm.controls.positiveNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numeric, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({message:'{{0}} is not a positive number' }) \r\n\tpositiveNumber: number;\r\n\r\n}\r\n","modelName":"user-info.model.ts","jsonName":null,"json":null},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { UserInfo } from './user-info.model';\r\n\r\n@Component({\r\n    selector: 'app-numeric-add-template-driven-validation-decorators',\r\n    templateUrl: './numeric-add.component.html'\r\n})\r\nexport class NumericAddTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    userinfo: UserInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.userinfo= new UserInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n\t    <input type=\"text\" name=\"integerNumber\" [(ngModel)]=\"userinfo.integerNumber\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userinfoForm.controls.integerNumber?.errors\">{{userinfoForm.controls.integerNumber?.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  numeric, NumericValueType, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class UserInfo {\r\n\r\n\t@numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false }) \r\n\tintegerNumber: number;\r\n\r\n}\r\n","modelName":"user-info.model.ts","jsonName":null,"json":null}}