{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numeric-complete-validator',\r\n    templateUrl: './numeric-complete.component.html'\r\n})\r\nexport class NumericCompleteValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\t\t\t\tdataTypes = [ \"Real\", \"Integer\",];\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            dataType:['',], \r\n            negativeNumber:['', RxwebValidators.numeric({acceptValue:NumericValueType.NegativeNumber })], \r\n            decimalNumber:['', RxwebValidators.numeric({allowDecimal:true })], \r\n            integerNumber:['', RxwebValidators.numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Integer\"  })], \r\n            realNumber:['', RxwebValidators.numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' })], \r\n            positiveNumber:['', RxwebValidators.numeric({message:'{{0}} is not a positive number' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select formControlName=\"dataType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Integer'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Real Number</label>\r\n      <input type=\"text\" formControlName=\"realNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.realNumber.errors\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNumber.errors\">{{userInfoFormGroup.controls.positiveNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"acceptValueExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numeric({acceptValue:NumericValueType.NegativeNumber });\r\n","modelName":null,"jsonName":null,"json":null},"acceptValue":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numeric-acceptValue-validator',\r\n    templateUrl: './numeric-accept-value.component.html'\r\n})\r\nexport class NumericAcceptValueValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            negativeNumber:['', RxwebValidators.numeric({acceptValue:NumericValueType.NegativeNumber })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"allowDecimalExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numeric({allowDecimal:true });\r\n","modelName":null,"jsonName":null,"json":null},"allowDecimal":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numeric-allowDecimal-validator',\r\n    templateUrl: './numeric-allow-decimal.component.html'\r\n})\r\nexport class NumericAllowDecimalValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            decimalNumber:['', RxwebValidators.numeric({allowDecimal:true })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"acceptValueExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Integer\"  });\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Integer\"  });\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numeric-conditionalExpression-validator',\r\n    templateUrl: './numeric-conditional-expression.component.html'\r\n})\r\nexport class NumericConditionalExpressionValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\t\t\t\tdataTypes = [ \"Real\", \"Integer\",];\r\n\t\r\n\t\r\n\t\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            dataType:['',], \r\n            realNumber:['', RxwebValidators.numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' })], \r\n            integerNumber:['', RxwebValidators.numeric({acceptValue:NumericValueType.PositiveNumber  ,conditionalExpression:(x,y) => x.dataType == \"Integer\"  })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select formControlName=\"dataType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Real Number</label>\r\n      <input type=\"text\" formControlName=\"realNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.realNumber.errors\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Integer Number' then you need to add 'Data Type' input as 'Integer'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"acceptValueExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' });\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numeric({acceptValue:NumericValueType.Both  ,conditionalExpression:'x => x.dataType == \"Real\"' });\r\n","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.numeric({message:'{{0}} is not a positive number' });\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numeric-message-validator',\r\n    templateUrl: './numeric-message.component.html'\r\n})\r\nexport class NumericMessageValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            positiveNumber:['', RxwebValidators.numeric({message:'{{0}} is not a positive number' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNumber.errors\">{{userInfoFormGroup.controls.positiveNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numeric-dynamic-validator',\r\n    templateUrl: './numeric-dynamic.component.html'\r\n})\r\nexport class NumericDynamicValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\t\t\t\tdataTypes = [ \"Real\", \"Integer\",];\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/numeric/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar userInfo = { dataType:'', negativeNumber:'', decimalNumber:'', integerNumber:'', realNumber:'', positiveNumber:'',  }\r\n\t\t\tthis.userInfoFormGroup = this.formBuilder.group(userInfo,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userInfoFormGroup\"  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Data Type</label>\r\n      <select formControlName=\"dataType\" class=\"form-control\">\r\n\t\t<option [value]=\"item\" *ngFor=\"let item of dataTypes\">{{item}}</option>\r\n      </select>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.dataType.errors\">{{userInfoFormGroup.controls.dataType.errors.numeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Negative Number</label>\r\n      <input type=\"text\" formControlName=\"negativeNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a negative number<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.negativeNumber.errors\">{{userInfoFormGroup.controls.negativeNumber.errors.numeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Decimal Number</label>\r\n      <input type=\"text\" formControlName=\"decimalNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive decimal number<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.decimalNumber.errors\">{{userInfoFormGroup.controls.decimalNumber.errors.numeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Real Number</label>\r\n      <input type=\"text\" formControlName=\"realNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Real Number' then you need to add 'Data Type' input as 'Real'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.realNumber.errors\">{{userInfoFormGroup.controls.realNumber.errors.numeric.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Positive Number</label>\r\n      <input type=\"text\" formControlName=\"positiveNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a positive number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.positiveNumber.errors\">{{userInfoFormGroup.controls.positiveNumber.errors.numeric.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":"dynamic.json","json":"{\"dataType\":{},\"negativeNumber\":{\"numeric\":{\"acceptValue\":\"NumericValueType.NegativeNumber\"}},\"decimalNumber\":{\"numeric\":{\"allowDecimal\":\"true\"}},\"realNumber\":{\"numeric\":{\"acceptValue\":\"NumericValueType.Both\",\"conditionalExpression\":\"x => x.dataType == \\\"Real\\\"\"}},\"positiveNumber\":{\"numeric\":{\"message\":\"{{0}} is not a positive number\"}}}"},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators ,NumericValueType} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-numeric-add-validator',\r\n    templateUrl: './numeric-add.component.html'\r\n})\r\nexport class NumericAddValidatorComponent implements OnInit {\r\n    userInfoFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userInfoFormGroup = this.formBuilder.group({\r\n            integerNumber:['', RxwebValidators.numeric({acceptValue:NumericValueType.PositiveNumber  ,allowDecimal:false })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Integer Number</label>\r\n      <input type=\"text\" formControlName=\"integerNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only a non decimal positive number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userInfoFormGroup.controls.integerNumber.errors\">{{userInfoFormGroup.controls.integerNumber.errors.numeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null}}