{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-complete-template-driven-validation-decorators',\r\n    templateUrl: './less-than-complete.component.html'\r\n})\r\nexport class LessThanCompleteTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks</label>\r\n\t    <input type=\"text\" name=\"obtainedMarks\" [(ngModel)]=\"user.obtainedMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.obtainedMarks?.errors\">{{userForm.controls.obtainedMarks?.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Activity Marks</label>\r\n\t    <input type=\"text\" name=\"otherActivityMarks\" [(ngModel)]=\"user.otherActivityMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Other Activity Marks less than to Obtained marks<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.otherActivityMarks?.errors\">{{userForm.controls.otherActivityMarks?.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n\t    <input type=\"text\" name=\"passingMarks\" [(ngModel)]=\"user.passingMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Passing Marks' then you need to add 'Obtained Marks' field less than '35'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.passingMarks?.errors\">{{userForm.controls.passingMarks?.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Marks</label>\r\n\t    <input type=\"text\" name=\"otherMarks\" [(ngModel)]=\"user.otherMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.otherMarks?.errors\">{{userForm.controls.otherMarks?.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tobtainedMarks: number;\r\n\r\n\t@lessThan({fieldName:'obtainedMarks' }) \r\n\totherActivityMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:(x,y) =>  x.obtainedMarks < 35 }) \r\n\tpracticalExamMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:'x => x.obtainedMarks < 35' }) \r\n\tpassingMarks: number;\r\n\r\n\t@lessThan({fieldName:'obtainedMarks'  ,message:'Please enter number greater than 100.' }) \r\n\totherMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"fieldNameExample":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks' }) \r\notherActivityMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"fieldName":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-fieldName-template-driven-validation-decorators',\r\n    templateUrl: './less-than-field-name.component.html'\r\n})\r\nexport class LessThanFieldNameTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks</label>\r\n\t    <input type=\"text\" name=\"obtainedMarks\" [(ngModel)]=\"user.obtainedMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.obtainedMarks?.errors\">{{userForm.controls.obtainedMarks?.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Activity Marks</label>\r\n\t    <input type=\"text\" name=\"otherActivityMarks\" [(ngModel)]=\"user.otherActivityMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Other Activity Marks less than to Obtained marks<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.otherActivityMarks?.errors\">{{userForm.controls.otherActivityMarks?.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tobtainedMarks: number;\r\n\r\n\t@lessThan({fieldName:'obtainedMarks' }) \r\n\totherActivityMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"fieldNameExampleFunction":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:(x,y) =>  x.obtainedMarks < 35 }) \r\npracticalExamMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:(x,y) =>  x.obtainedMarks < 35 }) \r\npracticalExamMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-conditionalExpression-template-driven-validation-decorators',\r\n    templateUrl: './less-than-conditional-expression.component.html'\r\n})\r\nexport class LessThanConditionalExpressionTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks</label>\r\n\t    <input type=\"text\" name=\"obtainedMarks\" [(ngModel)]=\"user.obtainedMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.obtainedMarks?.errors\">{{userForm.controls.obtainedMarks?.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n\t    <input type=\"text\" name=\"passingMarks\" [(ngModel)]=\"user.passingMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Passing Marks' then you need to add 'Obtained Marks' field less than '35'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.passingMarks?.errors\">{{userForm.controls.passingMarks?.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tobtainedMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:'x => x.obtainedMarks < 35' }) \r\n\tpassingMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:(x,y) =>  x.obtainedMarks < 35 }) \r\n\tpracticalExamMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"fieldNameExampleString":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:'x => x.obtainedMarks < 35' }) \r\npassingMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:'x => x.obtainedMarks < 35' }) \r\npassingMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks'  ,message:'Please enter number greater than 100.' }) \r\notherMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-message-template-driven-validation-decorators',\r\n    templateUrl: './less-than-message.component.html'\r\n})\r\nexport class LessThanMessageTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Other Marks</label>\r\n\t    <input type=\"text\" name=\"otherMarks\" [(ngModel)]=\"user.otherMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.otherMarks?.errors\">{{userForm.controls.otherMarks?.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@lessThan({fieldName:'obtainedMarks'  ,message:'Please enter number greater than 100.' }) \r\n\totherMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-add-template-driven-validation-decorators',\r\n    templateUrl: './less-than-add.component.html'\r\n})\r\nexport class LessThanAddTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Marks</label>\r\n\t    <input type=\"text\" name=\"marks\" [(ngModel)]=\"user.marks\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.marks?.errors\">{{userForm.controls.marks?.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n\t    <input type=\"text\" name=\"passingMarks\" [(ngModel)]=\"user.passingMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">This is checking less than validation for PassingMarks must be less than to marks.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.passingMarks?.errors\">{{userForm.controls.passingMarks?.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tmarks: number;\r\n\r\n\t@lessThan({fieldName:'marks' }) \r\n\tpassingMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null}}