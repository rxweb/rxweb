{"complete":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-complete',\r\n    templateUrl: './less-than-complete.component.html'\r\n})\r\nexport class LessThanCompleteComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks</label>\r\n      <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Activity Marks</label>\r\n      <input type=\"text\" formControlName=\"otherActivityMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Other Activity Marks less than to Obtained marks<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherActivityMarks.errors\">{{userFormGroup.controls.otherActivityMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Practical Exam Marks</label>\r\n      <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of less than validation on 'Practical Exam Marks' then Obtained Marks must be less than '35'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Passing Marks' then you need to add 'Obtained Marks' field less than '35'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Marks</label>\r\n      <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tobtainedMarks: number;\r\n\r\n\t@lessThan({fieldName:'obtainedMarks' }) \r\n\totherActivityMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:(x,y) =>  x.obtainedMarks < 35 }) \r\n\tpracticalExamMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:'x => x.obtainedMarks < 35' }) \r\n\tpassingMarks: number;\r\n\r\n\t@lessThan({fieldName:'obtainedMarks'  ,message:'Please enter number greater than 100.' }) \r\n\totherMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"fieldNameExample":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks' }) \r\notherActivityMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"fieldName":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-fieldName',\r\n    templateUrl: './less-than-field-name.component.html'\r\n})\r\nexport class LessThanFieldNameComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks</label>\r\n      <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Activity Marks</label>\r\n      <input type=\"text\" formControlName=\"otherActivityMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Other Activity Marks less than to Obtained marks<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherActivityMarks.errors\">{{userFormGroup.controls.otherActivityMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tobtainedMarks: number;\r\n\r\n\t@lessThan({fieldName:'obtainedMarks' }) \r\n\totherActivityMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"fieldNameExampleFunction":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:(x,y) =>  x.obtainedMarks < 35 }) \r\npracticalExamMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:(x,y) =>  x.obtainedMarks < 35 }) \r\npracticalExamMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-conditionalExpression',\r\n    templateUrl: './less-than-conditional-expression.component.html'\r\n})\r\nexport class LessThanConditionalExpressionComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks</label>\r\n      <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Passing Marks' then you need to add 'Obtained Marks' field less than '35'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Practical Exam Marks</label>\r\n      <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of less than validation on 'Practical Exam Marks' then Obtained Marks must be less than '35'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tobtainedMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:'x => x.obtainedMarks < 35' }) \r\n\tpassingMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:(x,y) =>  x.obtainedMarks < 35 }) \r\n\tpracticalExamMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"fieldNameExampleString":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:'x => x.obtainedMarks < 35' }) \r\npassingMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks'  ,conditionalExpression:'x => x.obtainedMarks < 35' }) \r\npassingMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"@lessThan({fieldName:'obtainedMarks'  ,message:'Please enter number greater than 100.' }) \r\notherMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-message',\r\n    templateUrl: './less-than-message.component.html'\r\n})\r\nexport class LessThanMessageComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Other Marks</label>\r\n      <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@lessThan({fieldName:'obtainedMarks'  ,message:'Please enter number greater than 100.' }) \r\n\totherMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"dynamic":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-dynamic',\r\n    templateUrl: './less-than-dynamic.component.html'\r\n})\r\nexport class LessThanDynamicComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/lessThan/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks</label>\r\n      <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"   />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Practical Exam Marks' or 'Passing Marks', then Obtained Marks must be less than '35'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThan.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Activity Marks</label>\r\n      <input type=\"text\" formControlName=\"otherActivityMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Other Activity Marks less than to Obtained marks<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherActivityMarks.errors\">{{userFormGroup.controls.otherActivityMarks.errors.lessThan.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Passing Marks' then you need to add 'Obtained Marks' field less than '35'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThan.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Marks</label>\r\n      <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThan.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tobtainedMarks: number;\r\n\r\n\t@prop()\r\n\totherActivityMarks: number;\r\n\r\n\t@prop()\r\n\tpassingMarks: number;\r\n\r\n\t@prop()\r\n\totherMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":"dynamic.json","json":"{\"obtainedMarks\":{},\"otherActivityMarks\":{\"lessThan\":{\"fieldName\":\"obtainedMarks\"}},\"passingMarks\":{\"lessThan\":{\"fieldName\":\"obtainedMarks\",\"conditionalExpression\":\"x => x.obtainedMarks < 35\"}},\"otherMarks\":{\"lessThan\":{\"fieldName\":\"obtainedMarks\",\"message\":\"Please enter number greater than 100.\"}}}"},"add":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-add',\r\n    templateUrl: './less-than-add.component.html'\r\n})\r\nexport class LessThanAddComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Marks</label>\r\n      <input type=\"text\" formControlName=\"marks\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.marks.errors\">{{userFormGroup.controls.marks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This is checking less than validation for PassingMarks must be less than to marks.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tmarks: number;\r\n\r\n\t@lessThan({fieldName:'marks' }) \r\n\tpassingMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"edit":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-lessThan-edit',\r\n    templateUrl: './less-than-edit.component.html'\r\n})\r\nexport class LessThanEditComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/lessThan/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Marks</label>\r\n      <input type=\"text\" formControlName=\"marks\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.marks.errors\">{{userFormGroup.controls.marks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This is checking less than validation for PassingMarks must be less than to marks.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThan.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  lessThan,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\tmarks: number;\r\n\r\n\t@lessThan({fieldName:'marks' }) \r\n\tpassingMarks: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":"user-data.json","json":"{\"marks\":\"36\",\"passingMarks\":\"35\"}"}}