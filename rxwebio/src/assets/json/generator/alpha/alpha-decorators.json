{"complete":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-complete',\r\n    templateUrl: './alpha-complete.component.html'\r\n})\r\nexport class AlphaCompleteComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'India'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n      <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alpha, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@alpha() \r\n\tcountryName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@alpha({conditionalExpression:(x,y) => x.countryName == \"India\" }) \r\n\tcountryCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@alpha({conditionalExpression:'x => x.countryName ==\"India\"' }) \r\n\tcityName: string;\r\n\r\n\t@alpha({allowWhiteSpace:true }) \r\n\tstateName: string;\r\n\r\n\t@alpha({message:'You can enter only alphabets.' }) \r\n\tstateCode: string;\r\n\r\n}\r\n","modelName":"address-info.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@alpha({conditionalExpression:(x,y) => x.countryName == \"India\" }) \r\ncountryCode: string;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-conditionalExpression',\r\n    templateUrl: './alpha-conditional-expression.component.html'\r\n})\r\nexport class AlphaConditionalExpressionComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'India'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Country Code</label>\r\n      <input type=\"text\" formControlName=\"countryCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryCode.errors\">{{addressInfoFormGroup.controls.countryCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alpha, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@alpha() \r\n\tcountryName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@alpha({conditionalExpression:'x => x.countryName ==\"India\"' }) \r\n\tcityName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@alpha({conditionalExpression:(x,y) => x.countryName == \"India\" }) \r\n\tcountryCode: string;\r\n\r\n}\r\n","modelName":"address-info.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@alpha({conditionalExpression:'x => x.countryName ==\"India\"' }) \r\ncityName: string;\r\n","modelName":null,"jsonName":null,"json":null},"allowWhiteSpaceExample":{"notes":null,"component":null,"html":null,"model":"@alpha({allowWhiteSpace:true }) \r\nstateName: string;\r\n","modelName":null,"jsonName":null,"json":null},"allowWhiteSpace":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-allowWhiteSpace',\r\n    templateUrl: './alpha-allow-white-space.component.html'\r\n})\r\nexport class AlphaAllowWhiteSpaceComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alpha, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@alpha({allowWhiteSpace:true }) \r\n\tstateName: string;\r\n\r\n}\r\n","modelName":"address-info.model.ts","jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"@alpha({message:'You can enter only alphabets.' }) \r\nstateCode: string;\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-message',\r\n    templateUrl: './alpha-message.component.html'\r\n})\r\nexport class AlphaMessageComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        this.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n      <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alpha, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@alpha({message:'You can enter only alphabets.' }) \r\n\tstateCode: string;\r\n\r\n}\r\n","modelName":"address-info.model.ts","jsonName":null,"json":null},"dynamic":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { AddressInfo } from './address-info.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-dynamic',\r\n    templateUrl: './alpha-dynamic.component.html'\r\n})\r\nexport class AlphaDynamicComponent implements OnInit {\r\n    addressInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let addressInfo = new AddressInfo();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/alpha/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.addressInfoFormGroup = this.formBuilder.formGroup(addressInfo,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"addressInfoFormGroup\"  [formGroup]=\"addressInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"   />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Country Code' or 'City' then you need to add this input as 'India'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.countryName.errors\">{{addressInfoFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City</label>\r\n      <input type=\"text\" formControlName=\"cityName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City' then you need to add 'Country Name' input as 'India'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.cityName.errors\">{{addressInfoFormGroup.controls.cityName.errors.alpha.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Name</label>\r\n      <input type=\"text\" formControlName=\"stateName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This allowed whitespace in alpha validation<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateName.errors\">{{addressInfoFormGroup.controls.stateName.errors.alpha.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>State Code</label>\r\n      <input type=\"text\" formControlName=\"stateCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"addressInfoFormGroup.controls.stateCode.errors\">{{addressInfoFormGroup.controls.stateCode.errors.alpha.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!addressInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alpha,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class AddressInfo {\r\n\r\n\t@prop()\r\n\tcountryName: string;\r\n\r\n\t@prop()\r\n\tcityName: string;\r\n\r\n\t@prop()\r\n\tstateName: string;\r\n\r\n\t@prop()\r\n\tstateCode: string;\r\n\r\n}\r\n","modelName":"address-info.model.ts","jsonName":"dynamic.json","json":"{\"countryName\":{\"alpha\":true},\"cityName\":{\"alpha\":{\"conditionalExpression\":\"x => x.countryName ==\\\"India\\\"\"}},\"stateName\":{\"alpha\":{\"allowWhiteSpace\":\"true\"}},\"stateCode\":{\"alpha\":{\"message\":\"You can enter only alphabets.\"}}}"},"add":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-add',\r\n    templateUrl: './alpha-add.component.html'\r\n})\r\nexport class AlphaAddComponent implements OnInit {\r\n    countryFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let country = new Country();\r\n        this.countryFormGroup = this.formBuilder.formGroup(country);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"countryFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.countryName.errors\">{{countryFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!countryFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alpha, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Country {\r\n\r\n\t@alpha() \r\n\tcountryName: string;\r\n\r\n}\r\n","modelName":"country.model.ts","jsonName":null,"json":null},"edit":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-alpha-edit',\r\n    templateUrl: './alpha-edit.component.html'\r\n})\r\nexport class AlphaEditComponent implements OnInit {\r\n    countryFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/alpha/edit/country-data.json').subscribe(country => {\r\n            this.countryFormGroup = this.formBuilder.formGroup<Country>(Country,country);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"countryFormGroup\"  [formGroup]=\"countryFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Country Name</label>\r\n      <input type=\"text\" formControlName=\"countryName\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.countryName.errors\">{{countryFormGroup.controls.countryName.errors.alpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!countryFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alpha, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Country {\r\n\r\n\t@alpha() \r\n\tcountryName: string;\r\n\r\n}\r\n","modelName":"country.model.ts","jsonName":"country-data.json","json":"{\"countryName\":\"India\"}"}}