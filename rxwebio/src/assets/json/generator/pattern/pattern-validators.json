{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-complete-validator',\r\n    templateUrl: './pattern-complete.component.html'\r\n})\r\nexport class PatternCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            userName:['', RxwebValidators.pattern({expression:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} })], \r\n            zipCode:['', RxwebValidators.pattern({expression:{'zipCode':RegExp('^[0-9]{5}(?:-[0-9]{4})?$') }  ,message:'Zip code should match 12345 or 12345-6789' })], \r\n            contactNumber:['', RxwebValidators.pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  })], \r\n            age:['', RxwebValidators.pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$new /')}  ,conditionalExpression:'x => x.userName==\"Bharat\"' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' or 'Age', then you need to add 'userName' input as 'Bharat<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.onlyAlpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Zip Code</label>\r\n      <input type=\"text\" formControlName=\"zipCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not <br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipCode.errors\">{{userFormGroup.controls.zipCode.errors.zipCode.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Contact Number</label>\r\n      <input type=\"text\" formControlName=\"contactNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'UserName' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.contactNumber.errors\">{{userFormGroup.controls.contactNumber.errors.onlyDigit.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Age</label>\r\n      <input type=\"text\" formControlName=\"age\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is Bharat<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.age.errors\">{{userFormGroup.controls.age.errors.onlyDigit.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"expressionExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.pattern({expression:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} });\r\n","modelName":null,"jsonName":null,"json":null},"expression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-expression-validator',\r\n    templateUrl: './pattern-expression.component.html'\r\n})\r\nexport class PatternExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            userName:['', RxwebValidators.pattern({expression:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' or 'Age', then you need to add 'userName' input as 'Bharat<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.onlyAlpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.pattern({expression:{'zipCode':RegExp('^[0-9]{5}(?:-[0-9]{4})?$') }  ,message:'Zip code should match 12345 or 12345-6789' });\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-message-validator',\r\n    templateUrl: './pattern-message.component.html'\r\n})\r\nexport class PatternMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            zipCode:['', RxwebValidators.pattern({expression:{'zipCode':RegExp('^[0-9]{5}(?:-[0-9]{4})?$') }  ,message:'Zip code should match 12345 or 12345-6789' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Zip Code</label>\r\n      <input type=\"text\" formControlName=\"zipCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not <br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipCode.errors\">{{userFormGroup.controls.zipCode.errors.zipCode.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"expressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  });\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  });\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-conditionalExpression-validator',\r\n    templateUrl: './pattern-conditional-expression.component.html'\r\n})\r\nexport class PatternConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            userName:['', RxwebValidators.pattern({expression:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} })], \r\n            age:['', RxwebValidators.pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$new /')}  ,conditionalExpression:'x => x.userName==\"Bharat\"' })], \r\n            contactNumber:['', RxwebValidators.pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' or 'Age', then you need to add 'userName' input as 'Bharat<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.onlyAlpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Age</label>\r\n      <input type=\"text\" formControlName=\"age\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is Bharat<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.age.errors\">{{userFormGroup.controls.age.errors.onlyDigit.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Contact Number</label>\r\n      <input type=\"text\" formControlName=\"contactNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'UserName' input as 'Bharat'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.contactNumber.errors\">{{userFormGroup.controls.contactNumber.errors.onlyDigit.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"expressionExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$new /')}  ,conditionalExpression:'x => x.userName==\"Bharat\"' });\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$new /')}  ,conditionalExpression:'x => x.userName==\"Bharat\"' });\r\n","modelName":null,"jsonName":null,"json":null},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-dynamic-validator',\r\n    templateUrl: './pattern-dynamic.component.html'\r\n})\r\nexport class PatternDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/pattern/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar user = { userName:'', zipCode:'', contactNumber:'', age:'',  }\r\n\t\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' or 'Age', then you need to add 'userName' input as 'Bharat<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Zip Code</label>\r\n      <input type=\"text\" formControlName=\"zipCode\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not <br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.zipCode.errors\">{{userFormGroup.controls.zipCode.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Age</label>\r\n      <input type=\"text\" formControlName=\"age\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is Bharat<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.age.errors\">{{userFormGroup.controls.age.errors.pattern.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":"dynamic.json","json":"{\"userName\":{\"pattern\":{\"expression\":\"{onlyAlpha: RegExp(/^[A-Za-z]+$/)}\"}},\"zipCode\":{\"pattern\":{\"expression\":\"{zipCode:RegExp(^[0-9]{5}(?:-[0-9]{4})?$) }\",\"message\":\"Zip code should match 12345 or 12345-6789\"}},\"age\":{\"pattern\":{\"expression\":\"{onlyDigit: RegExp(/^[0-9]*$new /)}\",\"conditionalExpression\":\"x => x.userName==\\\"Bharat\\\"\"}}}"},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-pattern-add-validator',\r\n    templateUrl: './pattern-add.component.html'\r\n})\r\nexport class PatternAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            userName:['', RxwebValidators.pattern({expression:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n      <input type=\"text\" formControlName=\"userName\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n\t<small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.userName.errors\">{{userFormGroup.controls.userName.errors.onlyAlpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null}}