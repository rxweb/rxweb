{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-pattern-complete-template-driven-validation-decorators',\r\n    templateUrl: './pattern-complete.component.html'\r\n})\r\nexport class PatternCompleteTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n\t    <input type=\"text\" name=\"userName\" [(ngModel)]=\"user.userName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' or 'Age', then you need to add 'userName' input as 'Bharat<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.userName?.errors\">{{userForm.controls.userName?.errors.onlyAlpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Zip Code</label>\r\n\t    <input type=\"text\" name=\"zipCode\" [(ngModel)]=\"user.zipCode\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not <br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.zipCode?.errors\">{{userForm.controls.zipCode?.errors.zipCode.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Age</label>\r\n\t    <input type=\"text\" name=\"age\" [(ngModel)]=\"user.age\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is Bharat<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.age?.errors\">{{userForm.controls.age?.errors.onlyDigit.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  pattern, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} }) \r\n\tuserName: string;\r\n\r\n\t@pattern({expression:{'zipCode':RegExp('^[0-9]{5}(?:-[0-9]{4})?$') }  ,message:'Zip code should match 12345 or 12345-6789' }) \r\n\tzipCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  }) \r\n\tcontactNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$new /')}  ,conditionalExpression:'x => x.userName==\"Bharat\"' }) \r\n\tage: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"expressionExample":{"notes":null,"component":null,"html":null,"model":"@pattern({expression:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} }) \r\nuserName: string;\r\n","modelName":null,"jsonName":null,"json":null},"expression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-pattern-expression-template-driven-validation-decorators',\r\n    templateUrl: './pattern-expression.component.html'\r\n})\r\nexport class PatternExpressionTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n\t    <input type=\"text\" name=\"userName\" [(ngModel)]=\"user.userName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' or 'Age', then you need to add 'userName' input as 'Bharat<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.userName?.errors\">{{userForm.controls.userName?.errors.onlyAlpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  pattern, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} }) \r\n\tuserName: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"@pattern({expression:{'zipCode':RegExp('^[0-9]{5}(?:-[0-9]{4})?$') }  ,message:'Zip code should match 12345 or 12345-6789' }) \r\nzipCode: string;\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-pattern-message-template-driven-validation-decorators',\r\n    templateUrl: './pattern-message.component.html'\r\n})\r\nexport class PatternMessageTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Zip Code</label>\r\n\t    <input type=\"text\" name=\"zipCode\" [(ngModel)]=\"user.zipCode\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">It checked that zipcode match zipcode regex or not <br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.zipCode?.errors\">{{userForm.controls.zipCode?.errors.zipCode.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  pattern, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'zipCode':RegExp('^[0-9]{5}(?:-[0-9]{4})?$') }  ,message:'Zip code should match 12345 or 12345-6789' }) \r\n\tzipCode: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"expressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  }) \r\ncontactNumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  }) \r\ncontactNumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-pattern-conditionalExpression-template-driven-validation-decorators',\r\n    templateUrl: './pattern-conditional-expression.component.html'\r\n})\r\nexport class PatternConditionalExpressionTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n\t    <input type=\"text\" name=\"userName\" [(ngModel)]=\"user.userName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Contact Number' or 'Age', then you need to add 'userName' input as 'Bharat<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.userName?.errors\">{{userForm.controls.userName?.errors.onlyAlpha.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Age</label>\r\n\t    <input type=\"text\" name=\"age\" [(ngModel)]=\"user.age\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">It checked that age match with digit regex or not and it conditionaly applied when userName is Bharat<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.age?.errors\">{{userForm.controls.age?.errors.onlyDigit.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  pattern, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} }) \r\n\tuserName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$new /')}  ,conditionalExpression:'x => x.userName==\"Bharat\"' }) \r\n\tage: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$/')}  ,conditionalExpression:(x,y) => x.userName == \"Bharat\"  }) \r\n\tcontactNumber: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"expressionExampleString":{"notes":null,"component":null,"html":null,"model":"@pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$new /')}  ,conditionalExpression:'x => x.userName==\"Bharat\"' }) \r\nage: string;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@pattern({expression:{'onlyDigit': RegExp('/^[0-9]*$new /')}  ,conditionalExpression:'x => x.userName==\"Bharat\"' }) \r\nage: string;\r\n","modelName":null,"jsonName":null,"json":null},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-pattern-add-template-driven-validation-decorators',\r\n    templateUrl: './pattern-add.component.html'\r\n})\r\nexport class PatternAddTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>User Name</label>\r\n\t    <input type=\"text\" name=\"userName\" [(ngModel)]=\"user.userName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">It checked that username match alpha regex or not<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.userName?.errors\">{{userForm.controls.userName?.errors.onlyAlpha.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  pattern, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@pattern({expression:{'onlyAlpha': RegExp('/^[A-Za-z]+$/')} }) \r\n\tuserName: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null}}