{"complete":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-longitude-complete',\r\n    templateUrl: './longitude-complete.component.html'\r\n})\r\nexport class LongitudeCompleteComponent implements OnInit {\r\n    countryFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let country = new Country();\r\n        this.countryFormGroup = this.formBuilder.formGroup(country);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"countryFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label> Continent</label>\r\n      <input type=\"text\" formControlName=\"continent\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Country Longitude' or 'Third Country Longitude', then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.continent.errors\">{{countryFormGroup.controls.continent.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Second Country Longitude</label>\r\n      <input type=\"text\" formControlName=\"secondCountryLongitude\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Country Longitude' then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.secondCountryLongitude.errors\">{{countryFormGroup.controls.secondCountryLongitude.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Country Longitude</label>\r\n      <input type=\"text\" formControlName=\"thirdCountryLongitude\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Third Country Longitude' then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.thirdCountryLongitude.errors\">{{countryFormGroup.controls.thirdCountryLongitude.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>First Country Longitude</label>\r\n      <input type=\"text\" formControlName=\"firstCountryLongitude\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter only longitude<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.firstCountryLongitude.errors\">{{countryFormGroup.controls.firstCountryLongitude.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!countryFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  longitude,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Country {\r\n\r\n\t@prop()\r\n\tcontinent: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@longitude({conditionalExpression:(x,y) => x.continent == \"Asia\"  }) \r\n\tsecondCountryLongitude: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@longitude({conditionalExpression:'x => x.continent ==\"Asia\"' }) \r\n\tthirdCountryLongitude: string;\r\n\r\n\t@longitude({message:'{{0}} is not a longitude' }) \r\n\tfirstCountryLongitude: string;\r\n\r\n}\r\n","modelName":"country.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@longitude({conditionalExpression:(x,y) => x.continent == \"Asia\"  }) \r\nsecondCountryLongitude: string;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-longitude-conditionalExpression',\r\n    templateUrl: './longitude-conditional-expression.component.html'\r\n})\r\nexport class LongitudeConditionalExpressionComponent implements OnInit {\r\n    countryFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let country = new Country();\r\n        this.countryFormGroup = this.formBuilder.formGroup(country);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"countryFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label> Continent</label>\r\n      <input type=\"text\" formControlName=\"continent\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Country Longitude' or 'Third Country Longitude', then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.continent.errors\">{{countryFormGroup.controls.continent.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Country Longitude</label>\r\n      <input type=\"text\" formControlName=\"thirdCountryLongitude\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Third Country Longitude' then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.thirdCountryLongitude.errors\">{{countryFormGroup.controls.thirdCountryLongitude.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Second Country Longitude</label>\r\n      <input type=\"text\" formControlName=\"secondCountryLongitude\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Country Longitude' then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.secondCountryLongitude.errors\">{{countryFormGroup.controls.secondCountryLongitude.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!countryFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  longitude,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Country {\r\n\r\n\t@prop()\r\n\tcontinent: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@longitude({conditionalExpression:'x => x.continent ==\"Asia\"' }) \r\n\tthirdCountryLongitude: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@longitude({conditionalExpression:(x,y) => x.continent == \"Asia\"  }) \r\n\tsecondCountryLongitude: string;\r\n\r\n}\r\n","modelName":"country.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@longitude({conditionalExpression:'x => x.continent ==\"Asia\"' }) \r\nthirdCountryLongitude: string;\r\n","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"@longitude({message:'{{0}} is not a longitude' }) \r\nfirstCountryLongitude: string;\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-longitude-message',\r\n    templateUrl: './longitude-message.component.html'\r\n})\r\nexport class LongitudeMessageComponent implements OnInit {\r\n    countryFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let country = new Country();\r\n        this.countryFormGroup = this.formBuilder.formGroup(country);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"countryFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Country Longitude</label>\r\n      <input type=\"text\" formControlName=\"firstCountryLongitude\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter only longitude<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.firstCountryLongitude.errors\">{{countryFormGroup.controls.firstCountryLongitude.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!countryFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  longitude, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Country {\r\n\r\n\t@longitude({message:'{{0}} is not a longitude' }) \r\n\tfirstCountryLongitude: string;\r\n\r\n}\r\n","modelName":"country.model.ts","jsonName":null,"json":null},"dynamic":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-longitude-dynamic',\r\n    templateUrl: './longitude-dynamic.component.html'\r\n})\r\nexport class LongitudeDynamicComponent implements OnInit {\r\n    countryFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let country = new Country();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/longitude/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.countryFormGroup = this.formBuilder.formGroup(country,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"countryFormGroup\"  [formGroup]=\"countryFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label> Continent</label>\r\n      <input type=\"text\" formControlName=\"continent\" class=\"form-control\"   />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Country Longitude' or 'Third Country Longitude', then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.continent.errors\">{{countryFormGroup.controls.continent.errors.longitude.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Country Longitude</label>\r\n      <input type=\"text\" formControlName=\"thirdCountryLongitude\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Third Country Longitude' then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.thirdCountryLongitude.errors\">{{countryFormGroup.controls.thirdCountryLongitude.errors.longitude.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>First Country Longitude</label>\r\n      <input type=\"text\" formControlName=\"firstCountryLongitude\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You can enter only longitude<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"countryFormGroup.controls.firstCountryLongitude.errors\">{{countryFormGroup.controls.firstCountryLongitude.errors.longitude.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!countryFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  longitude,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Country {\r\n\r\n\t@prop()\r\n\tcontinent: string;\r\n\r\n\t@prop()\r\n\tthirdCountryLongitude: string;\r\n\r\n\t@prop()\r\n\tfirstCountryLongitude: string;\r\n\r\n}\r\n","modelName":"country.model.ts","jsonName":"dynamic.json","json":"{\"continent\":{},\"thirdCountryLongitude\":{\"longitude\":{\"conditionalExpression\":\"x => x.continent ==\\\"Asia\\\"\"}},\"firstCountryLongitude\":{\"longitude\":{\"message\":\"{{0}} is not a longitude\"}}}"},"add":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { NumberInfo } from './number-info.model';\r\n\r\n@Component({\r\n    selector: 'app-longitude-add',\r\n    templateUrl: './longitude-add.component.html'\r\n})\r\nexport class LongitudeAddComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let numberInfo = new NumberInfo();\r\n        this.numberInfoFormGroup = this.formBuilder.formGroup(numberInfo);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"numberInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Country Longitude</label>\r\n      <input type=\"text\" formControlName=\"firstCountryLongitude\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You must enter a valid longitude<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.firstCountryLongitude.errors\">{{numberInfoFormGroup.controls.firstCountryLongitude.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  longitude, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class NumberInfo {\r\n\r\n\t@longitude() \r\n\tfirstCountryLongitude: string;\r\n\r\n}\r\n","modelName":"number-info.model.ts","jsonName":null,"json":null},"edit":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { NumberInfo } from './number-info.model';\r\n\r\n@Component({\r\n    selector: 'app-longitude-edit',\r\n    templateUrl: './longitude-edit.component.html'\r\n})\r\nexport class LongitudeEditComponent implements OnInit {\r\n    numberInfoFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/longitude/edit/number-info-data.json').subscribe(numberInfo => {\r\n            this.numberInfoFormGroup = this.formBuilder.formGroup<NumberInfo>(NumberInfo,numberInfo);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"numberInfoFormGroup\"  [formGroup]=\"numberInfoFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>First Country Longitude</label>\r\n      <input type=\"text\" formControlName=\"firstCountryLongitude\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">You must enter a valid longitude<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"numberInfoFormGroup.controls.firstCountryLongitude.errors\">{{numberInfoFormGroup.controls.firstCountryLongitude.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!numberInfoFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  longitude, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class NumberInfo {\r\n\r\n\t@longitude() \r\n\tfirstCountryLongitude: string;\r\n\r\n}\r\n","modelName":"number-info.model.ts","jsonName":"number-info-data.json","json":"{\"firstCountryLongitude\":\"27.0238\"}"}}