{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-longitude-complete-template-driven-validation-decorators',\r\n    templateUrl: './longitude-complete.component.html'\r\n})\r\nexport class LongitudeCompleteTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    country: Country\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.country= new Country()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #countryForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label> Continent</label>\r\n\t    <input type=\"text\" name=\"continent\" [(ngModel)]=\"country.continent\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Country Longitude' or 'Third Country Longitude', then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"countryForm.controls.continent?.errors\">{{countryForm.controls.continent?.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Country Longitude</label>\r\n\t    <input type=\"text\" name=\"thirdCountryLongitude\" [(ngModel)]=\"country.thirdCountryLongitude\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Third Country Longitude' then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"countryForm.controls.thirdCountryLongitude?.errors\">{{countryForm.controls.thirdCountryLongitude?.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>First Country Longitude</label>\r\n\t    <input type=\"text\" name=\"firstCountryLongitude\" [(ngModel)]=\"country.firstCountryLongitude\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">You can enter only longitude<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"countryForm.controls.firstCountryLongitude?.errors\">{{countryForm.controls.firstCountryLongitude?.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!countryForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  longitude,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Country {\r\n\r\n\t@prop()\r\n\tcontinent: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@longitude({conditionalExpression:(x,y) => x.continent == \"Asia\"  }) \r\n\tsecondCountryLongitude: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@longitude({conditionalExpression:'x => x.continent ==\"Asia\"' }) \r\n\tthirdCountryLongitude: string;\r\n\r\n\t@longitude({message:'{{0}} is not a longitude' }) \r\n\tfirstCountryLongitude: string;\r\n\r\n}\r\n","modelName":"country.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@longitude({conditionalExpression:(x,y) => x.continent == \"Asia\"  }) \r\nsecondCountryLongitude: string;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-longitude-conditionalExpression-template-driven-validation-decorators',\r\n    templateUrl: './longitude-conditional-expression.component.html'\r\n})\r\nexport class LongitudeConditionalExpressionTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    country: Country\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.country= new Country()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #countryForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label> Continent</label>\r\n\t    <input type=\"text\" name=\"continent\" [(ngModel)]=\"country.continent\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Second Country Longitude' or 'Third Country Longitude', then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"countryForm.controls.continent?.errors\">{{countryForm.controls.continent?.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Third Country Longitude</label>\r\n\t    <input type=\"text\" name=\"thirdCountryLongitude\" [(ngModel)]=\"country.thirdCountryLongitude\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Third Country Longitude' then you need to add 'Continent' input as 'Asia'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"countryForm.controls.thirdCountryLongitude?.errors\">{{countryForm.controls.thirdCountryLongitude?.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!countryForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  longitude,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Country {\r\n\r\n\t@prop()\r\n\tcontinent: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@longitude({conditionalExpression:'x => x.continent ==\"Asia\"' }) \r\n\tthirdCountryLongitude: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@longitude({conditionalExpression:(x,y) => x.continent == \"Asia\"  }) \r\n\tsecondCountryLongitude: string;\r\n\r\n}\r\n","modelName":"country.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@longitude({conditionalExpression:'x => x.continent ==\"Asia\"' }) \r\nthirdCountryLongitude: string;\r\n","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"@longitude({message:'{{0}} is not a longitude' }) \r\nfirstCountryLongitude: string;\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Country } from './country.model';\r\n\r\n@Component({\r\n    selector: 'app-longitude-message-template-driven-validation-decorators',\r\n    templateUrl: './longitude-message.component.html'\r\n})\r\nexport class LongitudeMessageTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    country: Country\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.country= new Country()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #countryForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>First Country Longitude</label>\r\n\t    <input type=\"text\" name=\"firstCountryLongitude\" [(ngModel)]=\"country.firstCountryLongitude\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">You can enter only longitude<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"countryForm.controls.firstCountryLongitude?.errors\">{{countryForm.controls.firstCountryLongitude?.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!countryForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  longitude, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Country {\r\n\r\n\t@longitude({message:'{{0}} is not a longitude' }) \r\n\tfirstCountryLongitude: string;\r\n\r\n}\r\n","modelName":"country.model.ts","jsonName":null,"json":null},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { NumberInfo } from './number-info.model';\r\n\r\n@Component({\r\n    selector: 'app-longitude-add-template-driven-validation-decorators',\r\n    templateUrl: './longitude-add.component.html'\r\n})\r\nexport class LongitudeAddTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    numberinfo: NumberInfo\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.numberinfo= new NumberInfo()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #numberinfoForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>First Country Longitude</label>\r\n\t    <input type=\"text\" name=\"firstCountryLongitude\" [(ngModel)]=\"numberinfo.firstCountryLongitude\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">You must enter a valid longitude<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"numberinfoForm.controls.firstCountryLongitude?.errors\">{{numberinfoForm.controls.firstCountryLongitude?.errors.longitude.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!numberinfoForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  longitude, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class NumberInfo {\r\n\r\n\t@longitude() \r\n\tfirstCountryLongitude: string;\r\n\r\n}\r\n","modelName":"number-info.model.ts","jsonName":null,"json":null}}