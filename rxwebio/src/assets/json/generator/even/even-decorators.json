{"complete":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-even-complete',\r\n    templateUrl: './even-complete.component.html'\r\n})\r\nexport class EvenCompleteComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" formControlName=\"type\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Even Number', then you need to add 'Type' input as 'Even'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Number</label>\r\n      <input type=\"text\" formControlName=\"number\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.number.errors\">{{userFormGroup.controls.number.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Even Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Even Number</label>\r\n      <input type=\"text\" formControlName=\"multiplesOfEvenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfEvenNumber.errors\">{{userFormGroup.controls.multiplesOfEvenNumber.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  even,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttype: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@even({conditionalExpression:(x,y) => x.type == \"Even\"  }) \r\n\tnumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@even({conditionalExpression:'x => x.type == \"Even\"' }) \r\n\tevenNumber: number;\r\n\r\n\t@even({message:'{{0}} is not an even number' }) \r\n\tmultiplesOfEvenNumber: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@even({conditionalExpression:(x,y) => x.type == \"Even\"  }) \r\nnumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-even-conditionalExpression',\r\n    templateUrl: './even-conditional-expression.component.html'\r\n})\r\nexport class EvenConditionalExpressionComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" formControlName=\"type\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Even Number', then you need to add 'Type' input as 'Even'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Even Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Number</label>\r\n      <input type=\"text\" formControlName=\"number\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.number.errors\">{{userFormGroup.controls.number.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  even,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttype: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@even({conditionalExpression:'x => x.type == \"Even\"' }) \r\n\tevenNumber: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@even({conditionalExpression:(x,y) => x.type == \"Even\"  }) \r\n\tnumber: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@even({conditionalExpression:'x => x.type == \"Even\"' }) \r\nevenNumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"@even({message:'{{0}} is not an even number' }) \r\nmultiplesOfEvenNumber: number;\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-even-message',\r\n    templateUrl: './even-message.component.html'\r\n})\r\nexport class EvenMessageComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Even Number</label>\r\n      <input type=\"text\" formControlName=\"multiplesOfEvenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfEvenNumber.errors\">{{userFormGroup.controls.multiplesOfEvenNumber.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  even, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@even({message:'{{0}} is not an even number' }) \r\n\tmultiplesOfEvenNumber: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"dynamic":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\nimport { FormBuilderConfiguration,} from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-even-dynamic',\r\n    templateUrl: './even-dynamic.component.html'\r\n})\r\nexport class EvenDynamicComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        let formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/decorators/even/dynamic/dynamic.json').subscribe(dynamic => {\r\n            formBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tthis.userFormGroup = this.formBuilder.formGroup(user,formBuilderConfiguration);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Type</label>\r\n      <input type=\"text\" formControlName=\"type\" class=\"form-control\"   />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Number' or 'Even Number', then you need to add 'Type' input as 'Even'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.type.errors\">{{userFormGroup.controls.type.errors.even.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Even Number' then you need to add 'Type' input as 'Even'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Multiples of Even Number</label>\r\n      <input type=\"text\" formControlName=\"multiplesOfEvenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.multiplesOfEvenNumber.errors\">{{userFormGroup.controls.multiplesOfEvenNumber.errors.even.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  even,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@prop()\r\n\ttype: string;\r\n\r\n\t@prop()\r\n\tevenNumber: number;\r\n\r\n\t@prop()\r\n\tmultiplesOfEvenNumber: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":"dynamic.json","json":"{\"type\":{},\"evenNumber\":{\"even\":{\"conditionalExpression\":\"x => x.type == \\\"Even\\\"\"}},\"multiplesOfEvenNumber\":{\"even\":{\"message\":\"{{0}} is not an even number\"}}}"},"add":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-even-add',\r\n    templateUrl: './even-add.component.html'\r\n})\r\nexport class EvenAddComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder    ) { }\r\n\r\n    ngOnInit() {\r\n        let user = new User();\r\n        this.userFormGroup = this.formBuilder.formGroup(user);\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  even, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@even() \r\n\tevenNumber: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"edit":{"notes":null,"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from \"@angular/forms\"\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RxFormBuilder } from '@rxweb/reactive-form-validators';\r\n\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-even-edit',\r\n    templateUrl: './even-edit.component.html'\r\n})\r\nexport class EvenEditComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n    constructor(\r\n        private formBuilder: RxFormBuilder,private http: HttpClient    ) { }\r\n\r\n    ngOnInit() {\r\n        this.http.get('assets/examples/reactive-form-validators/decorators/even/edit/user-data.json').subscribe(user => {\r\n            this.userFormGroup = this.formBuilder.formGroup<User>(User,user);\r\n        })\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Even Number</label>\r\n      <input type=\"text\" formControlName=\"evenNumber\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">you can enter only an even number<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.evenNumber.errors\">{{userFormGroup.controls.evenNumber.errors.even.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  even, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class User {\r\n\r\n\t@even() \r\n\tevenNumber: number;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":"user-data.json","json":"{\"evenNumber\":\"14\"}"}}