{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-complete-validator',\r\n    templateUrl: './less-than-equal-to-complete.component.html'\r\n})\r\nexport class LessThanEqualToCompleteValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            totalMarks:['',], \r\n            passingMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks' })], \r\n            obtainedMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  })], \r\n            practicalExamMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' })], \r\n            otherMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,message:'Please enter number less than 100.' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Total Marks</label>\r\n      <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Passing Marks less than to Total marks<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks</label>\r\n      <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Practical Exam Marks</label>\r\n      <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Marks</label>\r\n      <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"fieldNameExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.lessThanEqualTo({fieldName:'totalMarks' });\r\n","modelName":null,"jsonName":null,"json":null},"fieldName":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-fieldName-validator',\r\n    templateUrl: './less-than-equal-to-field-name.component.html'\r\n})\r\nexport class LessThanEqualToFieldNameValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            totalMarks:['',], \r\n            passingMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Total Marks</label>\r\n      <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Passing Marks less than to Total marks<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"fieldNameExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  });\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  });\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-conditionalExpression-validator',\r\n    templateUrl: './less-than-equal-to-conditional-expression.component.html'\r\n})\r\nexport class LessThanEqualToConditionalExpressionValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            totalMarks:['',], \r\n            practicalExamMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' })], \r\n            obtainedMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:(x,y) => x.totalMarks == 100  })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Total Marks</label>\r\n      <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Practical Exam Marks</label>\r\n      <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks</label>\r\n      <input type=\"text\" formControlName=\"obtainedMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'function'<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.obtainedMarks.errors\">{{userFormGroup.controls.obtainedMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"fieldNameExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' });\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,conditionalExpression:'x => x.totalMarks == 100' });\r\n","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,message:'Please enter number less than 100.' });\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-message-validator',\r\n    templateUrl: './less-than-equal-to-message.component.html'\r\n})\r\nexport class LessThanEqualToMessageValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            otherMarks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks'  ,message:'Please enter number less than 100.' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Other Marks</label>\r\n      <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null},"dynamic":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilderConfiguration,RxFormBuilder} from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-dynamic-validator',\r\n    templateUrl: './less-than-equal-to-dynamic.component.html'\r\n})\r\nexport class LessThanEqualToDynamicValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: RxFormBuilder , private http: HttpClient )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n\t\tlet formBuilderConfiguration = new FormBuilderConfiguration();\r\n\t\tthis.http.get('assets/examples/reactive-form-validators/validators/lessThanEqualTo/dynamic/dynamic.json').subscribe(dynamic => {\r\n\t\t\tformBuilderConfiguration.dynamicValidation = JSON.parse(JSON.stringify(dynamic));\r\n\t\t\tvar user = { totalMarks:'', passingMarks:'', obtainedMarks:'', practicalExamMarks:'', otherMarks:'',  }\r\n\t\t\tthis.userFormGroup = this.formBuilder.group(user,formBuilderConfiguration);\r\n\t\t})\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  *ngIf=\"userFormGroup\"  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Total Marks</label>\r\n      <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"   />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on obtained marks or practical exam marks then Total Marks must be 100.<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n      <input type=\"text\" formControlName=\"passingMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Passing Marks less than to Total marks<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.passingMarks.errors\">{{userFormGroup.controls.passingMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Practical Exam Marks</label>\r\n      <input type=\"text\" formControlName=\"practicalExamMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation of less than equal to validation on 'Obtained Marks' then then Total Marks must be 100.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.practicalExamMarks.errors\">{{userFormGroup.controls.practicalExamMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Other Marks</label>\r\n      <input type=\"text\" formControlName=\"otherMarks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n      <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.otherMarks.errors\">{{userFormGroup.controls.otherMarks.errors.lessThanEqualTo.message}}<br/></small>\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":"dynamic.json","json":"{\"totalMarks\":{},\"passingMarks\":{\"lessThanEqualTo\":{\"fieldName\":\"totalMarks\"}},\"practicalExamMarks\":{\"lessThanEqualTo\":{\"fieldName\":\"totalMarks\",\"conditionalExpression\":\"x => x.totalMarks == 100\"}},\"otherMarks\":{\"lessThanEqualTo\":{\"fieldName\":\"totalMarks\",\"message\":\"Please enter number less than 100.\"}}}"},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder } from \"@angular/forms\"\r\nimport { RxwebValidators } from '@rxweb/reactive-form-validators';\r\n\r\n@Component({\r\n    selector: 'app-lessThanEqualTo-add-validator',\r\n    templateUrl: './less-than-equal-to-add.component.html'\r\n})\r\nexport class LessThanEqualToAddValidatorComponent implements OnInit {\r\n    userFormGroup: FormGroup\r\n\r\n\tconstructor(\r\n        private formBuilder: FormBuilder )\r\n\t{ }\r\n\r\n    ngOnInit() {\r\n        this.userFormGroup = this.formBuilder.group({\r\n            totalMarks:['',], \r\n            marks:['', RxwebValidators.lessThanEqualTo({fieldName:'totalMarks' })], \r\n        });\r\n    }\r\n}\r\n","html":"<div>\r\n  <form  [formGroup]=\"userFormGroup\">\r\n    <div class=\"form-group\">\r\n      <label>Total Marks</label>\r\n      <input type=\"text\" formControlName=\"totalMarks\" class=\"form-control\"  />\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.totalMarks.errors\">{{userFormGroup.controls.totalMarks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Marks</label>\r\n      <input type=\"text\" formControlName=\"marks\" class=\"form-control\"  />\r\n      <small class=\"form-text text-muted\">This is checking less than equal to validation for  Marks must be less than equal to Total Marks.<br/></small>\r\n\t <small class=\"form-text text-danger\" *ngIf=\"userFormGroup.controls.marks.errors\">{{userFormGroup.controls.marks.errors.lessThanEqualTo.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userFormGroup.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":null,"modelName":null,"jsonName":null,"json":null}}