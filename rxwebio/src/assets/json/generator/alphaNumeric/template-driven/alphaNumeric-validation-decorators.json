{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-complete-template-driven-validation-decorators',\r\n    templateUrl: './alpha-numeric-complete.component.html'\r\n})\r\nexport class AlphaNumericCompleteTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    location: Location\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.location= new Location()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #locationForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n\t    <input type=\"text\" name=\"areaName\" [(ngModel)]=\"location.areaName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City Code'  or 'Country Code' then you need to add this input as 'Delhi'.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"locationForm.controls.areaName?.errors\">{{locationForm.controls.areaName?.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Flat Address</label>\r\n\t    <input type=\"text\" name=\"flatAddress\" [(ngModel)]=\"location.flatAddress\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"locationForm.controls.flatAddress?.errors\">{{locationForm.controls.flatAddress?.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Postal Address</label>\r\n\t    <input type=\"text\" name=\"postalAddress\" [(ngModel)]=\"location.postalAddress\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"locationForm.controls.postalAddress?.errors\">{{locationForm.controls.postalAddress?.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n\t    <input type=\"text\" name=\"cityCode\" [(ngModel)]=\"location.cityCode\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"locationForm.controls.cityCode?.errors\">{{locationForm.controls.cityCode?.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alphaNumeric, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@alphaNumeric() \r\n\tareaName: string;\r\n\r\n\t@alphaNumeric({allowWhiteSpace:true }) \r\n\tflatAddress: string;\r\n\r\n\t//Shows custom message\r\n\t@alphaNumeric({message:'Please enter only alphanumerics, special characters are not allowed.' }) \r\n\tpostalAddress: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@alphaNumeric({conditionalExpression:(x,y) => x.areaName == \"Delhi\"  }) \r\n\tcountryCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@alphaNumeric({conditionalExpression:'x => x.areaName ==\"Delhi\"' }) \r\n\tcityCode: string;\r\n\r\n}\r\n","modelName":"location.model.ts","jsonName":null,"json":null},"allowWhiteSpaceExample":{"notes":null,"component":null,"html":null,"model":"@alphaNumeric({allowWhiteSpace:true }) \r\nflatAddress: string;\r\n","modelName":null,"jsonName":null,"json":null},"allowWhiteSpace":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-allowWhiteSpace-template-driven-validation-decorators',\r\n    templateUrl: './alpha-numeric-allow-white-space.component.html'\r\n})\r\nexport class AlphaNumericAllowWhiteSpaceTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    location: Location\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.location= new Location()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #locationForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Flat Address</label>\r\n\t    <input type=\"text\" name=\"flatAddress\" [(ngModel)]=\"location.flatAddress\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"locationForm.controls.flatAddress?.errors\">{{locationForm.controls.flatAddress?.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alphaNumeric, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@alphaNumeric({allowWhiteSpace:true }) \r\n\tflatAddress: string;\r\n\r\n}\r\n","modelName":"location.model.ts","jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"@alphaNumeric({message:'Please enter only alphanumerics, special characters are not allowed.' }) \r\npostalAddress: string;\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-message-template-driven-validation-decorators',\r\n    templateUrl: './alpha-numeric-message.component.html'\r\n})\r\nexport class AlphaNumericMessageTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    location: Location\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.location= new Location()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #locationForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Postal Address</label>\r\n\t    <input type=\"text\" name=\"postalAddress\" [(ngModel)]=\"location.postalAddress\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"locationForm.controls.postalAddress?.errors\">{{locationForm.controls.postalAddress?.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alphaNumeric, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t//Shows custom message\r\n\t@alphaNumeric({message:'Please enter only alphanumerics, special characters are not allowed.' }) \r\n\tpostalAddress: string;\r\n\r\n}\r\n","modelName":"location.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@alphaNumeric({conditionalExpression:(x,y) => x.areaName == \"Delhi\"  }) \r\ncountryCode: string;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-conditionalExpression-template-driven-validation-decorators',\r\n    templateUrl: './alpha-numeric-conditional-expression.component.html'\r\n})\r\nexport class AlphaNumericConditionalExpressionTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    location: Location\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.location= new Location()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #locationForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n\t    <input type=\"text\" name=\"areaName\" [(ngModel)]=\"location.areaName\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'City Code'  or 'Country Code' then you need to add this input as 'Delhi'.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"locationForm.controls.areaName?.errors\">{{locationForm.controls.areaName?.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>City Code</label>\r\n\t    <input type=\"text\" name=\"cityCode\" [(ngModel)]=\"location.cityCode\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on this field then you need to add 'areaName' input as 'Delhi'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"locationForm.controls.cityCode?.errors\">{{locationForm.controls.cityCode?.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alphaNumeric, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@alphaNumeric() \r\n\tareaName: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@alphaNumeric({conditionalExpression:'x => x.areaName ==\"Delhi\"' }) \r\n\tcityCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@alphaNumeric({conditionalExpression:(x,y) => x.areaName == \"Delhi\"  }) \r\n\tcountryCode: string;\r\n\r\n}\r\n","modelName":"location.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@alphaNumeric({conditionalExpression:'x => x.areaName ==\"Delhi\"' }) \r\ncityCode: string;\r\n","modelName":null,"jsonName":null,"json":null},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { Location } from './location.model';\r\n\r\n@Component({\r\n    selector: 'app-alphaNumeric-add-template-driven-validation-decorators',\r\n    templateUrl: './alpha-numeric-add.component.html'\r\n})\r\nexport class AlphaNumericAddTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    location: Location\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.location= new Location()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #locationForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Area Name</label>\r\n\t    <input type=\"text\" name=\"areaName\" [(ngModel)]=\"location.areaName\"  class=\"form-control\" />\r\n\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"locationForm.controls.areaName?.errors\">{{locationForm.controls.areaName?.errors.alphaNumeric.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!locationForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  alphaNumeric, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class Location {\r\n\r\n\t@alphaNumeric() \r\n\tareaName: string;\r\n\r\n}\r\n","modelName":"location.model.ts","jsonName":null,"json":null}}