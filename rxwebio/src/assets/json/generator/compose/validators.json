{"rightSidebarLinks":[{"id":"compose","title":"compose (Validator)","subLink":null},{"id":"whentouse","title":"When to use","subLink":[]},{"id":"basiccomposevalidation","title":"Basic Compose Validation","subLink":[]},{"id":"composeconfig","title":"ComposeConfig","subLink":[{"title":"validators","id":"validators"},{"title":"conditionalExpression","id":"conditionalexpression"}]},{"id":"completecomposeexample","title":"Complete Compose Example","subLink":[]},{"id":"dynamiccomposeexample","title":"Dynamic Compose Example","subLink":[]},{"id":"githubissues","title":"compose Github Issues","subLink":null},{"id":"discussion","title":"Discussion","subLink":null}],"title":"compose","description":" Compose validation  validators  is used to apply multiple validations on a particular field.","validatorType":"validators","validationTypeTitle":"Validators","tabArray":{"complete":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-compose-complete\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-complete-component\"></div> \r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-complete-html\"></div> \r\n"}],"dynamic":[{"tabName":"Example","tabGroupContent":null,"content":"<div component=\"app-example-runner\" ref-component=\"app-compose-dynamic\"></div>\r\n"},{"tabName":"Component","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-dynamic-component\"></div>\r\n"},{"tabName":"Json","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-dynamic-json\"></div>\r\n"},{"tabName":"Html","tabGroupContent":null,"content":"<div component=\"app-code\" key=\"compose-dynamic-html\"></div> \r\n"}]},"innerHtml":null,"htmlContent":"<div class='row page-section' id= 'whentouse'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >When to use<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#whentouse'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Suppose you want to create UserInfo form, which contains fields like firstName, lastName, age, emailId and you want to apply multiple validations on these fields. Here depending upon the requirement these scenarios may arise.</p>\r\n<ol class='showHideElement'>\r\n    <li>Apply required and alpha validation on firstName field.</li>\r\n    <li>Apply required, alpha and different validation on lastName field.</li>\r\n    <li>Apply digit, maxNumber and minNumber validation on age field based on matched condition in the form, like if the firstName is 'Bharat', then only the age must be validated.</li>\r\n    <li>Apply required, email and maxLength validation based on matched condition in the form, like if the firstName is 'Bharat', then only the emailId must be validated.</li>\r\n    <data-scope scope=\"['decorator','validator']\">\r\n    <li>Apply compose validation dynamically based on server rules.</li>\r\n    </data-scope>\r\n</ol>\r\n<p class='showHideElement' >Letâ€™s see how compose  validator  fulfil the need.</p>\r\n</div></div>\r\n<div class='row page-section' id= 'basiccomposevalidation'>\r\n<div class='col-lg-12'>\r\n<h2>Basic Compose Validation<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#basiccomposevalidation'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Through Angular FormBuilder service we create FormGroup in the component.</p>\r\n<p class='showHideElement' >Here we have covered Add form operations. </p>\r\n<div component=\"app-code\" key=\"compose-add-component\"></div> \r\n<p class='showHideElement' >Next, we need to write html code.</p>\r\n<div component=\"app-code\" key=\"compose-add-html\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-compose-add\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'composeconfig'>\r\n<div class='col-lg-12'>\r\n<h2 class='showHideElement' >ComposeConfig<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#composeconfig'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Below options are not mandatory to use in the <span class='highlighted'>RxwebValidators.compose()</span> validator. If needed then use the below options.</p>\r\n<table class=\"table table-bordered table-striped showHideElement\">\r\n<tr><th>Option</th><th>Description</th></tr>\r\n<tr><td><a (click)='scrollTo(\"#validators\")' title=\"validators\">validators</a></td><td>It is an array of rxwebValidators. Validators are set according to the relative requirement based on which validation you want to apply. Here you have to specify the name of validator which you want to use.</td></tr>\r\n<tr><td><a  (click)='scrollTo(\"#conditionalExpression\")' title=\"conditionalExpression\">conditionalExpression</a></td><td>Compose validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</td></tr>\r\n</table>\r\n</div></div>\r\n<div class='row page-section' id= 'validators'>\r\n<div class='col-lg-12'>\r\n<h2>validators<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#validators'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>ValidatorFn[]</span></p>\r\n<p class='showHideElement' >It is an array of rxwebValidators. Validators are set according to the relative requirement based on which validation you want to apply. Here you have to specify the name of validator which you want to use.</p>\r\n<div component=\"app-code\" key=\"compose-validatorsExample-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-compose-validators\" title=\"Compose validator with validators\" key=\"validators\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'conditionalexpression'>\r\n<div class='col-lg-12'>\r\n<h2>conditionalExpression<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#conditionalexpression'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >Type :  <span class='highlighted'>Function</span>  |  <span class='highlighted'>string</span> </p>\r\n<p class='showHideElement' >Compose validation should be applied if the condition is matched in the <span class='highlighted'>conditionalExpression</span> function. Validation framework will pass two parameters at the time of <span class='highlighted'>conditionalExpression</span> check. Those two parameters are current <span class='highlighted'>FormGroup</span> value and root <span class='highlighted'>FormGroup</span> value. You can apply the condition on respective object value.</p>\r\n<p class='showHideElement' >If there is need of dynamic validation means it is not fixed in client code, it will change based on some criterias. In this scenario you can bind the expression based on the expression value is coming from the web server in <span class='highlighted'>string</span> format. The <span class='highlighted'>conditionalExpression</span> will work as same as client function.</p>\r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>Function</span> object. </p></blockquote>\r\n<div component=\"app-code\" key=\"compose-conditionalExpressionExampleFunction-model\"></div> \r\n<blockquote class='showHideElement' ><p>Binding <span class='highlighted'>conditionalExpression</span> with <span class='highlighted'>string</span> object. </p></blockquote>\r\n<div component=\"app-code\" key=\"compose-conditionalExpressionExampleString-model\"></div> \r\n<div component=\"app-example-runner\" ref-component=\"app-compose-conditionalExpression\" title=\"alpha validator with conditionalExpression\" key=\"conditionalExpression\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'completecomposeexample'>\r\n<div class='col-lg-12'>\r\n<h2>Complete Compose Example<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#completecomposeexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Complete Compose example which includes all the ComposeConfig properties will fulfil the requirement of scenarios 1, 2, 3 and 4.</p>\r\n<div component=\"app-tabs\" key=\"complete\"></div>\r\n</div></div>\r\n<div class='row page-section' id= 'dynamiccomposeexample'>\r\n<div class='col-lg-12'>\r\n<h2>Dynamic Compose Example<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#dynamiccomposeexample'><i class='fa fa-link'></i></a></h2>\r\n\r\n<p class='showHideElement' >This Dynamic Compose example which execute based on json passed. conditional expression with function would be not apply in dynamic compose example. </p>\r\n<p class='showHideElement' >4</p>\r\n<div component=\"app-tabs\" key=\"dynamic\"></div>\r\n</div></div>\r\n<div class=\"row page-section\" id=\"githubissues\">\r\n<div class=\"col-lg-12\">\r\n<h2>Github Issues<a title='Link to this heading' class='link-header' href='/form-validations/compose/validators#githubissues' fragment='githubissues'><i class='fa fa-link'></i></a></h2>\r\n<div component=\"app-github-issue\"></div>\r\n</div>\r\n</div>\r\n<div class=\"row page-section\" id=\"discussion\">\r\n<div class=\"col-lg-12\">\r\n<div component=\"app-disqus\"></div>\r\n</div>\r\n</div>\r\n"}