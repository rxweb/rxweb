{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { SubjectDetails } from './subject-details.model';\r\n\r\n@Component({\r\n    selector: 'app-maxNumber-complete-template-driven-validation-decorators',\r\n    templateUrl: './max-number-complete.component.html'\r\n})\r\nexport class MaxNumberCompleteTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    subjectdetails: SubjectDetails\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.subjectdetails= new SubjectDetails()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #subjectdetailsForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Subject Code</label>\r\n\t    <input type=\"text\" name=\"subjectCode\" [(ngModel)]=\"subjectdetails.subjectCode\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Maximum Marks' or 'Obtained Marks', then you need to add 'Type' input as '8CS5A'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"subjectdetailsForm.controls.subjectCode?.errors\">{{subjectdetailsForm.controls.subjectCode?.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks for above subject code</label>\r\n\t    <input type=\"text\" name=\"obtainedMarks\" [(ngModel)]=\"subjectdetails.obtainedMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">To apply the validation of Max Number on 'Obtained Marks' field, then enter the value '8CS5A' in 'Subject Code' textbox and you can enter maxNumber upto 100<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"subjectdetailsForm.controls.obtainedMarks?.errors\">{{subjectdetailsForm.controls.obtainedMarks?.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n\t    <input type=\"text\" name=\"passingMarks\" [(ngModel)]=\"subjectdetails.passingMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter MaxNumber upto 50<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"subjectdetailsForm.controls.passingMarks?.errors\">{{subjectdetailsForm.controls.passingMarks?.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Practical Marks</label>\r\n\t    <input type=\"text\" name=\"practicalMarks\" [(ngModel)]=\"subjectdetails.practicalMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter MaxNumber upto 70<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"subjectdetailsForm.controls.practicalMarks?.errors\">{{subjectdetailsForm.controls.practicalMarks?.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!subjectdetailsForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxNumber,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class SubjectDetails {\r\n\r\n\t@prop()\r\n\tsubjectCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@maxNumber({value:100  ,conditionalExpression:(x,y) => x.subjectCode == \"8CS5A\"  }) \r\n\tmaximumMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@maxNumber({value:100  ,conditionalExpression:'x => x.subjectCode == \"8CS5A\"' }) \r\n\tobtainedMarks: number;\r\n\r\n\t@maxNumber({value:50 }) \r\n\tpassingMarks: number;\r\n\r\n\t@maxNumber({value:70  ,message:'{{0}} exceeds the Maximum marks Limit' }) \r\n\tpracticalMarks: number;\r\n\r\n}\r\n","modelName":"subject-details.model.ts","jsonName":null,"json":null},"valueExampleFunction":{"notes":null,"component":null,"html":null,"model":"@maxNumber({value:100  ,conditionalExpression:(x,y) => x.subjectCode == \"8CS5A\"  }) \r\nmaximumMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"value":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { SubjectDetails } from './subject-details.model';\r\n\r\n@Component({\r\n    selector: 'app-maxNumber-value-template-driven-validation-decorators',\r\n    templateUrl: './max-number-value.component.html'\r\n})\r\nexport class MaxNumberValueTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    subjectdetails: SubjectDetails\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.subjectdetails= new SubjectDetails()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #subjectdetailsForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks for above subject code</label>\r\n\t    <input type=\"text\" name=\"obtainedMarks\" [(ngModel)]=\"subjectdetails.obtainedMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">To apply the validation of Max Number on 'Obtained Marks' field, then enter the value '8CS5A' in 'Subject Code' textbox and you can enter maxNumber upto 100<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"subjectdetailsForm.controls.obtainedMarks?.errors\">{{subjectdetailsForm.controls.obtainedMarks?.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!subjectdetailsForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxNumber, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class SubjectDetails {\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@maxNumber({value:100  ,conditionalExpression:'x => x.subjectCode == \"8CS5A\"' }) \r\n\tobtainedMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@maxNumber({value:100  ,conditionalExpression:(x,y) => x.subjectCode == \"8CS5A\"  }) \r\n\tmaximumMarks: number;\r\n\r\n}\r\n","modelName":"subject-details.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"@maxNumber({value:100  ,conditionalExpression:(x,y) => x.subjectCode == \"8CS5A\"  }) \r\nmaximumMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { SubjectDetails } from './subject-details.model';\r\n\r\n@Component({\r\n    selector: 'app-maxNumber-conditionalExpression-template-driven-validation-decorators',\r\n    templateUrl: './max-number-conditional-expression.component.html'\r\n})\r\nexport class MaxNumberConditionalExpressionTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    subjectdetails: SubjectDetails\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.subjectdetails= new SubjectDetails()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #subjectdetailsForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Subject Code</label>\r\n\t    <input type=\"text\" name=\"subjectCode\" [(ngModel)]=\"subjectdetails.subjectCode\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Maximum Marks' or 'Obtained Marks', then you need to add 'Type' input as '8CS5A'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"subjectdetailsForm.controls.subjectCode?.errors\">{{subjectdetailsForm.controls.subjectCode?.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Obtained Marks for above subject code</label>\r\n\t    <input type=\"text\" name=\"obtainedMarks\" [(ngModel)]=\"subjectdetails.obtainedMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">To apply the validation of Max Number on 'Obtained Marks' field, then enter the value '8CS5A' in 'Subject Code' textbox and you can enter maxNumber upto 100<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"subjectdetailsForm.controls.obtainedMarks?.errors\">{{subjectdetailsForm.controls.obtainedMarks?.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!subjectdetailsForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxNumber,prop, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class SubjectDetails {\r\n\r\n\t@prop()\r\n\tsubjectCode: string;\r\n\r\n\t//If you want to apply conditional expression of type 'string'\r\n\t@maxNumber({value:100  ,conditionalExpression:'x => x.subjectCode == \"8CS5A\"' }) \r\n\tobtainedMarks: number;\r\n\r\n\t//If you want to apply conditional expression of type 'function'\r\n\t@maxNumber({value:100  ,conditionalExpression:(x,y) => x.subjectCode == \"8CS5A\"  }) \r\n\tmaximumMarks: number;\r\n\r\n}\r\n","modelName":"subject-details.model.ts","jsonName":null,"json":null},"valueExampleString":{"notes":null,"component":null,"html":null,"model":"@maxNumber({value:100  ,conditionalExpression:'x => x.subjectCode == \"8CS5A\"' }) \r\nobtainedMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"@maxNumber({value:100  ,conditionalExpression:'x => x.subjectCode == \"8CS5A\"' }) \r\nobtainedMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"valueExample":{"notes":null,"component":null,"html":null,"model":"@maxNumber({value:50 }) \r\npassingMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"@maxNumber({value:70  ,message:'{{0}} exceeds the Maximum marks Limit' }) \r\npracticalMarks: number;\r\n","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { SubjectDetails } from './subject-details.model';\r\n\r\n@Component({\r\n    selector: 'app-maxNumber-message-template-driven-validation-decorators',\r\n    templateUrl: './max-number-message.component.html'\r\n})\r\nexport class MaxNumberMessageTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    subjectdetails: SubjectDetails\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.subjectdetails= new SubjectDetails()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #subjectdetailsForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Practical Marks</label>\r\n\t    <input type=\"text\" name=\"practicalMarks\" [(ngModel)]=\"subjectdetails.practicalMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter MaxNumber upto 70<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"subjectdetailsForm.controls.practicalMarks?.errors\">{{subjectdetailsForm.controls.practicalMarks?.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!subjectdetailsForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxNumber, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class SubjectDetails {\r\n\r\n\t@maxNumber({value:70  ,message:'{{0}} exceeds the Maximum marks Limit' }) \r\n\tpracticalMarks: number;\r\n\r\n}\r\n","modelName":"subject-details.model.ts","jsonName":null,"json":null},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { SubjectDetails } from './subject-details.model';\r\n\r\n@Component({\r\n    selector: 'app-maxNumber-add-template-driven-validation-decorators',\r\n    templateUrl: './max-number-add.component.html'\r\n})\r\nexport class MaxNumberAddTemplateDrivenValidationDecoratorsComponent implements OnInit {\r\n    subjectdetails: SubjectDetails\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.subjectdetails= new SubjectDetails()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #subjectdetailsForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Passing Marks</label>\r\n\t    <input type=\"text\" name=\"passingMarks\" [(ngModel)]=\"subjectdetails.passingMarks\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">you can enter MaxNumber upto 50<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"subjectdetailsForm.controls.passingMarks?.errors\">{{subjectdetailsForm.controls.passingMarks?.errors.maxNumber.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!subjectdetailsForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"import {  maxNumber, } from \"@rxweb/reactive-form-validators\"\r\n\r\nexport class SubjectDetails {\r\n\r\n\t@maxNumber({value:50 }) \r\n\tpassingMarks: number;\r\n\r\n}\r\n","modelName":"subject-details.model.ts","jsonName":null,"json":null}}