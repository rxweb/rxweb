{"complete":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-complete-template-driven-validation-directives',\r\n    templateUrl: './data-uri-complete.component.html'\r\n})\r\nexport class DataUriCompleteTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Scheme</label>\r\n\t    <input type=\"text\" name=\"scheme\" [(ngModel)]=\"user.scheme\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' or 'Javascript Data Uri', then you need to add 'Scheme' input as 'DataUri'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.scheme?.errors\">{{userForm.controls.scheme?.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Javascript Data Uri</label>\r\n\t    <input type=\"text\" name=\"javascriptDataUri\" [(ngModel)]=\"user.javascriptDataUri\"  class=\"form-control\" [dataUri]=\"{'conditionalExpression':'x => x.scheme ==\\'DataUri\\''}\"/>\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Javascript Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.javascriptDataUri?.errors\">{{userForm.controls.javascriptDataUri?.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n\t    <input type=\"text\" name=\"htmlDataUri\" [(ngModel)]=\"user.htmlDataUri\"  class=\"form-control\" [dataUri]=\"{'message':'HTML Data Uri is not a proper data URI'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">enter Data URI only<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.htmlDataUri?.errors\">{{userForm.controls.htmlDataUri?.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tscheme: string;\r\n\r\n\tcssDataUri: string;\r\n\r\n\tjavascriptDataUri: string;\r\n\r\n\thtmlDataUri: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleFunction":{"notes":null,"component":null,"html":null,"model":"[dataUri]=\"{'conditionalExpression':(x,y) => x.scheme == \\'DataUri\\' }\"","modelName":null,"jsonName":null,"json":null},"conditionalExpression":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-conditionalExpression-template-driven-validation-directives',\r\n    templateUrl: './data-uri-conditional-expression.component.html'\r\n})\r\nexport class DataUriConditionalExpressionTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>Scheme</label>\r\n\t    <input type=\"text\" name=\"scheme\" [(ngModel)]=\"user.scheme\"  class=\"form-control\" />\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'CSS Data Uri' or 'Javascript Data Uri', then you need to add 'Scheme' input as 'DataUri'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.scheme?.errors\">{{userForm.controls.scheme?.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label>Javascript Data Uri</label>\r\n\t    <input type=\"text\" name=\"javascriptDataUri\" [(ngModel)]=\"user.javascriptDataUri\"  class=\"form-control\" [dataUri]=\"{'conditionalExpression':'x => x.scheme ==\\'DataUri\\''}\"/>\r\n\r\n      <small class=\"form-text text-muted\">If you want to apply conditional validation on 'Javascript Data Uri' then you need to add 'Scheme' input as 'DataUri'.<br/></small>\r\n      <small class=\"form-text text-muted\">Conditional Expression with type 'string'<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.javascriptDataUri?.errors\">{{userForm.controls.javascriptDataUri?.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\tscheme: string;\r\n\r\n\tjavascriptDataUri: string;\r\n\r\n\tcssDataUri: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"conditionalExpressionExampleString":{"notes":null,"component":null,"html":null,"model":"[dataUri]=\"{'conditionalExpression':'x => x.scheme ==\\'DataUri\\''}\"","modelName":null,"jsonName":null,"json":null},"messageExample":{"notes":null,"component":null,"html":null,"model":"[dataUri]=\"{'message':'HTML Data Uri is not a proper data URI'}\"","modelName":null,"jsonName":null,"json":null},"message":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-message-template-driven-validation-directives',\r\n    templateUrl: './data-uri-message.component.html'\r\n})\r\nexport class DataUriMessageTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n\t    <input type=\"text\" name=\"htmlDataUri\" [(ngModel)]=\"user.htmlDataUri\"  class=\"form-control\" [dataUri]=\"{'message':'HTML Data Uri is not a proper data URI'}\"/>\r\n\r\n      <small class=\"form-text text-muted\">enter Data URI only<br/></small>\r\n      <small class=\"form-text text-muted\">Shows custom message.<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.htmlDataUri?.errors\">{{userForm.controls.htmlDataUri?.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\thtmlDataUri: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null},"add":{"notes":[],"component":"import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup,Validators } from \"@angular/forms\"\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n    selector: 'app-dataUri-add-template-driven-validation-directives',\r\n    templateUrl: './data-uri-add.component.html'\r\n})\r\nexport class DataUriAddTemplateDrivenValidationDirectivesComponent implements OnInit {\r\n    user: User\r\n\t\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n       this.user= new User()\r\n    }\r\n}\r\n","html":"<div>\r\n  <form #userForm = \"ngForm\">\r\n    <div class=\"form-group\">\r\n      <label>HTML Data Uri</label>\r\n\t    <input type=\"text\" name=\"htmlDataUri\" [(ngModel)]=\"user.htmlDataUri\"  class=\"form-control\" dataUri/>\r\n\r\n      <small class=\"form-text text-muted\">You must enter a data URI<br/></small>\r\n\t   <small class=\"form-text text-danger\" *ngIf=\"userForm.controls.htmlDataUri?.errors\">{{userForm.controls.htmlDataUri?.errors.dataUri.message}}<br/></small>\t\r\n    </div>\r\n    <button [disabled]=\"!userForm.valid\" class=\"btn btn-primary\">Submit</button>\r\n  </form>\r\n</div>\r\n","model":"\r\nexport class User {\r\n\r\n\thtmlDataUri: string;\r\n\r\n}\r\n","modelName":"user.model.ts","jsonName":null,"json":null}}