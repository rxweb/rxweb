{"version":3,"sources":["control-config-processor.ts"],"names":[],"mappings":"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","file":"control-config-processor.js","sourceRoot":"","sourcesContent":["import { Input } from '@angular/core';\nimport { FormControlConfig, ControlConfig } from '../services/form-control-config';\nimport { DynamicFormBuildConfig } from '../models/interface/dynamic-form-build-config';\n\nimport { DYNAMIC_ELEMENT_DESIGN_TREE } from '../const/dynamic-element-design-tree.const';\nimport { BOOTSTRAP_DESIGN_CONFIG } from '../const/bootstrap-design-config.const';\nimport { DomManipulation } from '../domain/dom-manipulation';\nimport { ApplicationUtil } from '../util/application-util';\nimport { objectPropValue } from '../functions/object-prop-value.function';\n\nimport { PREPEND_BOTH, PREPEND_LEFT, PREPEND_RIGHT, INPUT_TEXT,SQUARE_ERROR, SQUARE_SMALL, SQUARE_LABEL,SQUARE_CONTROL,ADVANCE, INPUT, TEXT, RANGE, FILE, STRING, CONTROL } from '../const/app.const';\nimport { DynamicNodeConfig } from '../models/interface/dynamic-node-config';\nexport class ControlConfigProcessor {\n    isBuild: boolean = false;\n    _viewMode: any;\n     dynamicFormBuildConfig: DynamicFormBuildConfig;\n/**\n * @param {?} value\n * @return {?}\n */\nset viewMode(value: string) {\n        this._viewMode = value;\n        if (this.isBuild)\n            this.build();\n    }\n/**\n * @return {?}\n */\nget viewMode(): string {\n        return this._viewMode;\n    }\n/**\n * @return {?}\n */\nget currentViewMode(): any {\n        return DYNAMIC_ELEMENT_DESIGN_TREE.viewMode[this.viewMode];\n    }\n/**\n * @param {?} name\n * @return {?}\n */\ngetView(name: string) {\n        return DYNAMIC_ELEMENT_DESIGN_TREE[name];\n    }\n/**\n * @return {?}\n */\nget viewClassPath(): any {\n        return BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[this.viewMode];\n    }\n\n     uiBindings: any[];\n/**\n * @param {?} element\n * @param {?} renderer\n */\nconstructor(protected element: Node,\nprivate renderer) { }\n/**\n * @return {?}\n */\nbuild() {\n        this.uiBindings.forEach(controlConfigName => {\n            this.designForm(controlConfigName, this.element, this.currentViewMode[0], this.currentViewMode[1], BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[this.viewMode]);\n        })\n    }\n/**\n * @param {?} controlConfigName\n * @param {?} element\n * @param {?} viewRoot\n * @param {?} viewChild\n * @param {?} classPath\n * @param {?=} childrenControlConfig\n * @return {?}\n */\ndesignForm(controlConfigName, element, viewRoot, viewChild, classPath: any, childrenControlConfig?: FormControlConfig) {\n        let /** @type {?} */ controlConfig = childrenControlConfig || this.getControlConfig(controlConfigName);\n        if (controlConfig) {\n            if (controlConfig && !controlConfig.config.skipDefaultView)\n                this.createElement(viewRoot, viewChild, element, controlConfig, classPath);\n            else {\n                let /** @type {?} */ currentView = this.getView(controlConfig.config.type);\n                this.createElement(currentView[0], currentView[1], element, controlConfig, BOOTSTRAP_DESIGN_CONFIG.elementClassPath[controlConfig.config.type]);\n            }\n        } else if (this.viewMode == ADVANCE && Array.isArray(controlConfigName)) {\n            let /** @type {?} */ config: any = {};\n            let /** @type {?} */ domManipulation = this.createElement(this.currentViewMode[0], [], element, config, BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[this.viewMode])\n            controlConfigName.forEach(t => {\n                this.designForm(t, domManipulation.element, this.currentViewMode[1][0], this.currentViewMode[1][1], BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[this.viewMode].child[\"0\"])\n            })\n        }\n    }\n/**\n * @param {?} elementName\n * @param {?} collections\n * @param {?} parentElement\n * @param {?} controlConfig\n * @param {?} elementClassPath\n * @return {?}\n */\ncreateElement(elementName: string, collections: any[], parentElement: any, controlConfig: FormControlConfig, elementClassPath: any) {\n        elementClassPath = elementClassPath ? elementClassPath : {};\n        let /** @type {?} */ dynamicNodeConfig: DynamicNodeConfig = {\n            controlConfig: controlConfig, additionalClasses: elementClassPath, renderer: this.renderer, collections: collections, controlConfigProcessor:this\n        }\n        let /** @type {?} */ domManipulation = new DomManipulation(parentElement, elementName, dynamicNodeConfig);\n        this.createChildrens(collections, domManipulation, controlConfig, elementClassPath)\n        if (controlConfig.config && controlConfig.config.childrens && controlConfig.config.childrens.length > 0) {\n            controlConfig.config.childrens.forEach((t, i) => {\n                let /** @type {?} */ childrenControlConfig = undefined;\n                if (!(typeof t == STRING) && !Array.isArray(t))\n                    childrenControlConfig = new ControlConfig({ ...t, ...{ skipDefaultView: true } }, {});\n                this.designForm(t, domManipulation.element, this.currentViewMode[0], this.currentViewMode[1], BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[this.viewMode], childrenControlConfig);\n            })\n        }\n        return domManipulation;\n    }\n/**\n * @param {?} collections\n * @param {?} domManipulation\n * @param {?} controlConfig\n * @param {?} elementClassPath\n * @param {?=} isSubscribe\n * @return {?}\n */\ncreateChildrens(collections, domManipulation, controlConfig, elementClassPath,isSubscribe:boolean = true) {\n        let /** @type {?} */ elementCount = 0;\n        let /** @type {?} */ childElementsClassConfig = elementClassPath.child ? elementClassPath.child : {};\n        for (var /** @type {?} */ i = 0; i < collections.length; i++) {\n            let /** @type {?} */ collection = collections[i];\n            if (!ApplicationUtil.isObject(collection)) {\n                if (this.isCreateElement(collections[i], controlConfig)) {\n                    if (collection == SQUARE_CONTROL && controlConfig.config.type == undefined && controlConfig.config.childControlConfigs) {\n                        controlConfig.config.childControlConfigs.forEach(x => {\n                            let /** @type {?} */ childControlConfig = this.getControlConfig(x);\n                            this.createChildNodes(collections, childControlConfig, childElementsClassConfig, elementCount, i, domManipulation);\n                        })\n                    } else {\n                        let /** @type {?} */ isIncrease = this.createChildNodes(collections, controlConfig, childElementsClassConfig, elementCount, i, domManipulation);\n                        if (isIncrease)\n                            i = i + 1;\n                    }\n                }\n                elementCount++;\n            } else {\n                if (collection.for)\n                    this.runForCollection(collection, domManipulation, controlConfig, elementClassPath);\n                if (isSubscribe)\n                domManipulation.parseObject(collections[i], isSubscribe);\n            }\n        }\n    }\n/**\n * @param {?} collections\n * @param {?} controlConfig\n * @param {?} childElementsClassConfig\n * @param {?} elementCount\n * @param {?} i\n * @param {?} domManipulation\n * @return {?}\n */\nprivate createChildNodes(collections, controlConfig, childElementsClassConfig, elementCount, i, domManipulation) {\n        let /** @type {?} */ isNextCollection: boolean = false;\n        let /** @type {?} */ nextCollection = this.getCollection(collections[i], controlConfig);\n        let /** @type {?} */ childClasses = this.getAdditionalClasses(collections[i], childElementsClassConfig, elementCount, controlConfig);\n        if (!nextCollection) {\n            nextCollection = [collections[i], collections[i + 1]];\n            \n            isNextCollection = true;\n        }\n        this.createElement(nextCollection[0], nextCollection[1], domManipulation.element, controlConfig, childClasses);\n        return isNextCollection;\n    }\n/**\n * @param {?} collection\n * @param {?} domManipulation\n * @param {?} controlConfig\n * @param {?} elementClassPath\n * @return {?}\n */\nprivate runForCollection(collection: any, domManipulation, controlConfig, elementClassPath) {\n        Object.keys(collection.for).forEach(t => {\n            let /** @type {?} */ source = objectPropValue(t, controlConfig);\n            source.forEach((x, index) => {\n                let /** @type {?} */ item = collection.for[t].call(controlConfig, x, index);\n                this.createChildrens(item, domManipulation, controlConfig, elementClassPath);\n            })\n\n        })\n    }\n/**\n * @param {?} name\n * @param {?} childClasses\n * @param {?} index\n * @param {?} controlConfig\n * @return {?}\n */\nprivate getAdditionalClasses(name: string, childClasses: { [key: string]: any }, index: number, controlConfig: FormControlConfig) {\n        name = this.getName(name, controlConfig)\n        let /** @type {?} */ additionalClasses = BOOTSTRAP_DESIGN_CONFIG.elementClassPath[name];\n        let /** @type {?} */ childrenClasses = childClasses[index] ? childClasses[index] : {\n            class: []\n        };\n        if (additionalClasses) {\n            if (childrenClasses.class)\n                additionalClasses = { class: additionalClasses.class.concat(childrenClasses.class), listenerProps: additionalClasses.listenerProps, child: additionalClasses.child }\n            return additionalClasses\n        }\n\n        return childrenClasses;\n    }\n/**\n * @param {?} name\n * @param {?} controlConfig\n * @return {?}\n */\nprivate getCollection(name: string,controlConfig: FormControlConfig) {\n        if (name[0] == \"[\") {\n            name = this.getName(name, controlConfig);\n            return DYNAMIC_ELEMENT_DESIGN_TREE[name];\n        }\n        return undefined;\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate getControlName(name: string) {\n        let /** @type {?} */ controlName: string = '';\n        switch (name) {\n            case RANGE:\n            case FILE:\n            case TEXT:\n                controlName = INPUT;\n                break;\n            default:\n                controlName = name;\n\n        }\n        return controlName;\n    }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate getControlConfig(name: string) {\n        return this.dynamicFormBuildConfig.controlsConfig[name];\n    }\n/**\n * @param {?} name\n * @param {?} controlConfig\n * @return {?}\n */\nprivate getName(name: string, controlConfig: FormControlConfig) {\n        name = name.replace(new RegExp(/\\[/g), '').replace(new RegExp(/\\]/g), '');\n        name = (name == CONTROL) ? this.getControlName(controlConfig.config.type) : name;\n        switch (name) {\n            case INPUT:\n                name = this.prependControl(name,controlConfig);\n                break;\n            case INPUT_TEXT:\n                name = INPUT;\n                break;\n        }\n        return name;\n    }\n/**\n * @param {?} name\n * @param {?} controlConfig\n * @return {?}\n */\nprivate prependControl(name: string, controlConfig: FormControlConfig) {\n        if (controlConfig.config.ui && controlConfig.config.ui.prependText && controlConfig.config.ui.prependText.right && controlConfig.config.ui.prependText.left)\n            name = PREPEND_BOTH;\n        else if (name == INPUT && controlConfig.config.ui && controlConfig.config.ui.prependText && controlConfig.config.ui.prependText.left)\n            name = PREPEND_LEFT;\n        else if (name == INPUT && controlConfig.config.ui && controlConfig.config.ui.prependText && controlConfig.config.ui.prependText.right)\n            name = PREPEND_RIGHT;\n        return name;\n    }\n/**\n * @param {?} collection\n * @param {?} controlConfig\n * @return {?}\n */\nprivate isCreateElement(collection: any, controlConfig: FormControlConfig) {\n        let /** @type {?} */ isCreate = true;\n        switch (collection) {\n            case SQUARE_LABEL:\n                isCreate = controlConfig.label != undefined;\n                break;\n            case SQUARE_SMALL:\n                isCreate = controlConfig.description != undefined;\n                break;\n            case SQUARE_ERROR:\n                isCreate = controlConfig.formControl != undefined && controlConfig.formControl.validator != undefined;\n                break;\n        }\n        return isCreate;\n    }\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dynamicFormBuildConfig': [{ type: Input, args: ['rxwebDynamicForm', ] },],\n'viewMode': [{ type: Input },],\n'uiBindings': [{ type: Input },],\n};\n}\n\nfunction ControlConfigProcessor_tsickle_Closure_declarations() {\n/** @type {?} */\nControlConfigProcessor.propDecorators;\n/** @type {?} */\nControlConfigProcessor.prototype.isBuild;\n/** @type {?} */\nControlConfigProcessor.prototype._viewMode;\n/** @type {?} */\nControlConfigProcessor.prototype.dynamicFormBuildConfig;\n/** @type {?} */\nControlConfigProcessor.prototype.uiBindings;\n/** @type {?} */\nControlConfigProcessor.prototype.element;\n/** @type {?} */\nControlConfigProcessor.prototype.renderer;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}