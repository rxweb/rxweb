{"version":3,"sources":["rxweb-bootstrap-form.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,UAAA,EAAoB,SAAA,EAAqB,MAAA,eAAA,CAAA;AAC7D,OAAO,EAAE,sBAAA,EAAuB,MAAA,2CAAA,CAAA;AAChC,OAAO,EAAE,YAAA,EAAa,MAAA,0BAAA,CAAA;AACtB,MAEC,6BAAA,SAAA,sBAAA;IADD;;;OAGG;IACH,YAAK,UAAuB,EAAY,QAAU;QAC1C,KAAK,CAAC,UAAU,CAAC,aAAqB,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IACL;;OAEG;IACH,QADK;QAEG,IAAI,CADC,KAAC,EAAK,CAAE;IAEjB,CAAC;IACL;;;OAGG;IACH,cAJK,CAAA,OAAA;QAKG,OAAO,OAJC,CAAO,iBAAC;YAKZ,IAAI,CAJC,cAAC,CAAc,OAAC,CAAO,iBAAC,CAAiB,CAAC;QAMnD,IAAI,gBAAgB,CAJhB,SAAA,GAAY,OAAA,CAAQ,YAAC,CAAY,cAAC,CAAc,CAAC;QAKrD,IAAI,SAJC,IAAY,YAAA,CAAa,QAAC,CAAQ,SAAC,CAAS,EAAE;YAK/C,YAAY,CAJC,QAAC,CAAQ,SAAC,CAAS,CAAC,OAAC,EAAO,CAAE;YAK3C,OAJO,YAAA,CAAa,QAAC,CAAQ,SAAC,CAAS,CAAC;SAK3C;IACL,CAAC;IACL;;OAEG;IACH,WANK;QAOG,IAAI,IANC,CAAI,OAAC;YAON,IAAI,CANC,cAAC,CAAc,IAAC,CAAI,OAAC,CAAO,CAAC;IAQ1C,CAAC;;AALE,iCAAA,GAAoC;IAO3C,EANE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAOrB,QAAQ,EANE,oBAAA;aAOb,EANC,EAAG;CAOJ,CANC;AAOF;;GAEG;AAPF,qCAAA,GAAA,GAAA,EAAA,CAAA;IASD,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,SAAS,GAAG;CAClB,CAAC;AAGF;IACA,gBAAgB;IAChB,sBAAsB,CAAC,UAAU,CAAC;IAClC;;;OAGG;IACH,sBAAsB,CAAC,cAAc,CAAC;AACtC,CAAC","file":"rxweb-bootstrap-form.directive.js","sourceRoot":"","sourcesContent":["import { Renderer2, ElementRef, OnInit, Directive, OnDestroy } from '@angular/core';\nimport { ControlConfigProcessor } from '../form-designer/control-config-processor';\nimport { ControlState } from '../statics/control-state';\nexport class RxDynamicFormDirective extends ControlConfigProcessor implements OnInit, OnDestroy {\n/**\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, renderer: Renderer2) {\n        super(elementRef.nativeElement as Node, renderer);\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.build();\n    }\n/**\n * @param {?} element\n * @return {?}\n */\nremoveChildren(element: any) {\n        while (element.firstElementChild)\n            this.removeChildren(element.firstElementChild);\n\n        let /** @type {?} */ controlId = element.getAttribute(\"data-rxwebid\");\n        if (controlId && ControlState.controls[controlId]) {\n            ControlState.controls[controlId].destroy();\n            delete ControlState.controls[controlId];\n        }\n    }\n/**\n * @return {?}\n */\nngOnDestroy() {\n        if (this.element)\n            this.removeChildren(this.element);\n\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[rxwebDynamicForm]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction RxDynamicFormDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nRxDynamicFormDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRxDynamicFormDirective.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}