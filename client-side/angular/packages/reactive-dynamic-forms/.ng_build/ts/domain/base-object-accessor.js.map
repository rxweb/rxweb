{"version":3,"sources":["base-object-accessor.ts"],"names":[],"mappings":"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","file":"base-object-accessor.js","sourceRoot":"","sourcesContent":["import { COLON, BLANK, STRING, SQUARE} from '../const/app.const';\nimport { DynamicNodeConfig } from '../models/interface/dynamic-node-config';\nimport { objectPropValue } from '../functions/object-prop-value.function';\nimport { FormControlConfig } from '../services/form-control-config';\n\nconst /** @type {?} */ PROPS: string = \":props.\";\nconst /** @type {?} */ GLOBAL_MATCH: string = \"g\";\nconst /** @type {?} */ DOT: string = \".\";\n/**\n * @abstract\n */\nexport abstract class BaseObjectAccessor {\n    controlConfig: FormControlConfig;\n    subscribeProps: { [key: string]: any } = {\n        names: [], props: {}\n    };\n/**\n * @param {?} dynamicNodeConfig\n */\nconstructor(public dynamicNodeConfig: DynamicNodeConfig) { this.controlConfig = this.dynamicNodeConfig.controlConfig; }\n/**\n * @param {?} text\n * @return {?}\n */\ngetPropName(text: string) {\n        if (text[0] == COLON || (text[0] == SQUARE)) {\n            return text.replace(new RegExp(COLON, GLOBAL_MATCH), BLANK).replace(new RegExp(SQUARE, GLOBAL_MATCH), BLANK);\n        }\n        return text;\n    }\n/**\n * @param {?} text\n * @return {?}\n */\ngetValue(text: string) {\n        if (typeof text == STRING && ((text[0] == COLON) || (text[0] == SQUARE))) {\n            text = text.replace(new RegExp(COLON, GLOBAL_MATCH), BLANK).replace(new RegExp(SQUARE, GLOBAL_MATCH), BLANK);\n            return objectPropValue(text, this.controlConfig);\n        }\n        return text;\n    }\n/**\n * @param {?} propName\n * @param {?} type\n * @param {?} attributeName\n * @param {?=} valuePropName\n * @param {?=} parentPropName\n * @return {?}\n */\nsetPropSubscription(propName: string, type: string, attributeName: string, valuePropName: string = '', parentPropName: string = '') {\n        if (propName.startsWith(PROPS)) \n            this.defineProp(propName);\n\n        let /** @type {?} */ prop = this.getPropName(propName);\n\n        if (!this.subscribeProps.props[prop])\n            this.subscribeProps.props[prop] = {};\n        if (!this.subscribeProps.props[prop][type])\n            this.subscribeProps.props[prop][type] = {}; \n        if (parentPropName) {\n            this.subscribeProps.props[prop][type][parentPropName] = {};\n            this.subscribeProps.props[prop][type][parentPropName][attributeName] = (valuePropName) ? valuePropName : propName;\n        } else\n            this.subscribeProps.props[prop][type][attributeName] = (valuePropName) ? valuePropName : propName;\n\n        if (this.subscribeProps.names.indexOf(prop) == -1)\n            this.subscribeProps.names.push(prop);\n\n    }\n/**\n * @param {?} propName\n * @return {?}\n */\nisSubscribeProp(propName:string) {\n        return (typeof propName == STRING && (propName[0] == COLON));\n    }\n/**\n * @param {?} propName\n * @return {?}\n */\ndefineProp(propName: string) {\n        let /** @type {?} */ splitText = propName.split(DOT);\n        if (splitText.length > 1) {\n            let /** @type {?} */ descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.controlConfig.props), splitText[1]);\n            if (!descriptor)\n                this.controlConfig.defineProp(splitText[1]);\n        }\n    }\n}\n\nfunction BaseObjectAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseObjectAccessor.prototype.controlConfig;\n/** @type {?} */\nBaseObjectAccessor.prototype.subscribeProps;\n/** @type {?} */\nBaseObjectAccessor.prototype.dynamicNodeConfig;\n}\n"]}