{"version":3,"sources":["override-object-prop.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAA,EAAqB,MAAA,0BAAA,CAAA;AAG9B,MAAM,gBAAgB,CAAhB,KAAA,GAAgB,OAAA,CAAQ;AAC9B;;GAEG;AACH,MAHC,yBAAA,SAAA,oBAAA;IAID;;OAEG;IACH,YAHK,iBAA8B,IAAkB,KAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,CAAA;IAIrD;;OAEG;IACH,iBALK;QAMG,IAAI,gBAAgB,CALhB,UAAA,GAAa,MAAA,CAAO,wBAAC,CAAwB,MAAC,CAAM,cAAC,CAAc,IAAC,CAAI,aAAC,CAAa,EAAE,KAAA,CAAM,CAAC;QAMnG,IAAI,gBAAgB,CALhB,KAAA,GAAQ,IAAA,CAAK,aAAC,CAAa,KAAC,CAAK;QAMrC,IAAI,gBAAgB,CALhB,QAAA,GAAW,IAAA,CAAK;QAMpB,MAAM,CALC,cAAC,CAAc,IAAC,CAAI,aAAC,EAAc,KAAA,EAAO;YAM7C,GAAG,EALE,GAAG,EAAA,GAAK,OAAO,UAAA,CAAW,CAAA,CAAE,UAAA,CAAW,GAAC,CAAG,IAAC,CAAI,IAAC,CAAI,aAAC,CAAa,CAAC,CAAA,CAAE,KAAA,CAAA,CAAM,CAAA;YAMjF,GAAG,EALE,CAAA,CAAE,EAAE,EAAA;gBAML,KAAK,GALG,CAAA,CAAE;gBAMV,IAAI,IALC,CAAI,aAAC,CAAa,WAAC,CAAW,KAAC,IAAQ,CAAA,EAAG;oBAM3C,IAAI,CALC,aAAC,CAAa,WAAC,CAAW,QAAC,CAAQ,CAAC,CAAC,CAAC;oBAM3C,IAAI,CALC,iBAAC,CAAiB,CAAC,CAAC,CAAA;oBAMzB,IAAI,CALC,aAAC,CAAa,KAAC,GAAO,CAAA,CAAA;iBAM9B;qBALM;oBAMH,IAAI,CALC,aAAC,CAAa,kBAAC,CAAkB,KAAC,EAAM,CAAA,EAAG,QAAA,CAAS,CAAC;oBAM1D,IAAI,UALC;wBAMD,UAAU,CALC,GAAC,CAAG,IAAC,CAAI,IAAC,CAAI,aAAC,EAAc,CAAA,CAAE,CAAC;oBAM/C,IAAI,CALC,aAAC,CAAa,OAAC,EAAO,CAAE;iBAMhC;gBACD,IAAI,CALC,aAAC,CAAa,MAAC,CAAM,KAAC,GAAO,CAAA,CAAE;gBAMpC,QAAQ,GALG,CAAA,CAAE;YAMjB,CAAC;SACJ,CALC,CAAA;QAMF,IAAI,CALC,uBAAC,EAAuB,CAAE;QAM/B,IAAI,IALC,CAAI,aAAC,CAAa,WAAC,CAAW,KAAC;YAMhC,IAAI,CALC,iBAAC,CAAiB,IAAC,CAAI,aAAC,CAAa,WAAC,CAAW,KAAC,CAAK,CAAC;IAMrE,CAAC;IACL;;OAEG;IANE,uBAAA;QAQG,IAAI,gBAAgB,CAPhB,KAAA,GAAQ,IAAA,CAAK,aAAC,CAAa,WAAC,CAAW,KAAC,CAAK;QAQjD,MAAM,CAPC,cAAC,CAAc,IAAC,CAAI,aAAC,CAAa,WAAC,EAAY,KAAA,EAAO;YAQzD,GAAG,EAPE,GAAG,EAAA,GAAK,OAAO,KAAA,CAAA,CAAM,CAAA;YAQ1B,GAAG,EAPE,CAAA,CAAE,EAAE,EAAA;gBAQL,KAAK,GAPG,CAAA,CAAE;gBAQV,IAAI,gBAAgB,CAPhB,CAAA,GAAI,UAAA,CAAW,GAAG,EAAA;oBAQlB,IAAI,KAPC,IAAQ,IAAA,CAAK,aAAC,CAAa,KAAC,EAAM;wBAQnC,IAAI,CAPC,aAAC,CAAa,KAAC,GAAO,KAAA,CAAM;wBAQjC,IAAI,CAPC,iBAAC,CAAiB,KAAC,CAAK,CAAC;qBAQjC;gBACL,CAAC,EAPE,EAAA,CAAG,CAAA;YAQV,CAAC;SACJ,CAPC,CAAA;IAQN,CAAC;CACJ","file":"override-object-prop.js","sourceRoot":"","sourcesContent":["import { ElementPropsAccessor } from './element-props-accessor';\nimport { DynamicNodeConfig } from '../models/interface/dynamic-node-config';\n\nconst /** @type {?} */ VALUE: string = \"value\";\n/**\n * @abstract\n */\nexport abstract class OverrideObjectProp extends ElementPropsAccessor {\n/**\n * @param {?} dynamicNodeConfig\n */\nconstructor(dynamicNodeConfig: DynamicNodeConfig) { super(dynamicNodeConfig); }\n/**\n * @return {?}\n */\noverrideValueProp() {\n        let /** @type {?} */ descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.controlConfig), VALUE);\n        let /** @type {?} */ value = this.controlConfig.value;\n        let /** @type {?} */ oldValue = null;\n        Object.defineProperty(this.controlConfig, VALUE, {\n            get: () => { return descriptor ? descriptor.get.call(this.controlConfig) : value },\n            set: (v) => {\n                value = v;\n                if (this.controlConfig.formControl.value != v) {\n                    this.controlConfig.formControl.setValue(v);\n                    this.resetElementValue(v)\n                    this.controlConfig.value = v\n                } else {\n                    this.controlConfig.notifyValueChanged(VALUE, v, oldValue);\n                    if (descriptor)\n                        descriptor.set.call(this.controlConfig, v);\n                    this.controlConfig.refresh();\n                }\n                this.controlConfig.config.value = v;\n                oldValue = v;\n            }\n        })\n        this.overrideFormControlProp();\n        if (this.controlConfig.formControl.value)\n            this.resetElementValue(this.controlConfig.formControl.value);\n    }\n/**\n * @return {?}\n */\nprivate overrideFormControlProp() {\n        let /** @type {?} */ value = this.controlConfig.formControl.value;\n        Object.defineProperty(this.controlConfig.formControl, VALUE, {\n            get: () => { return value },\n            set: (v) => {\n                value = v;\n                var /** @type {?} */ t = setTimeout(() => {\n                    if (value != this.controlConfig.value) {\n                        this.controlConfig.value = value;\n                        this.resetElementValue(value);\n                    }\n                }, 50)\n            }\n        })\n    }\n}"]}