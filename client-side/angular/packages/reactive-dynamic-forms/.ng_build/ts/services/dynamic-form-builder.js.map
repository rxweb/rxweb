{"version":3,"sources":["dynamic-form-builder.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAA,EAAa,WAAA,EAAa,aAAA,EAAe,eAAA,EAAgB,MAAA,iCAAA,CAAA;AAElE,OAAO,EAAE,iBAAA,EAAkB,MAAA,uBAAA,CAAA;AAC3B,OAAO,EAAE,WAAA,EAAY,MAAA,oCAAA,CAAA;AAErB,OAAO,EAAE,eAAA,EAAgB,MAAA,0BAAA,CAAA;AAEzB,MAAM,gBAAgB,CAAhB,KAAA,GAAgB,OAAA,CAAQ;AAC9B,MAAC;IAED;;;;OAIG;IACH,SALK,CAAA,MAAA,EAAA,iBAAA;QAMG,IAAI,CALC,iBAAC,GAAmB,iBAAA,CAAkB;QAM3C,IAAI,gBAAgB,CALhB,YAAA,GAAuC,EAAA,CAAG;QAM9C,IAAI,gBAAgB,CALhB,gBAAA,GAAmB,IAAI,KAAA,EAAwB,CAAG;QAMtD,IAAI,gBAAgB,CALhB,WAAA,GAAc,EAAA,CAAG;QAMrB,IAAI,gBAAgB,CALhB,SAAA,GAAY,IAAI,WAAA,CAAY,EAAC,EAAG,YAAA,EAAc,EAAA,EAAI,SAAA,CAAU,CAAC;QAMjE,MAAM,CALC,OAAC,CAAO,CAAC,CAAC,EAAE,CAAA,EAAG,EAAA;YAMlB,IAAI,CALC,CAAC,IAAC,IAAO,KAAA,EAAO;gBAMjB,IAAI,CALC,eAAC,CAAe,WAAC,EAAY,CAAA,EAAE,gBAAA,CAAA,CAAC,eAAA,CAAgB,gBAAC,CAAgB,SAAC,CAAa,CAAA,EAAa,YAAA,CAAa,CAAC;aAMlH;iBALM;gBAMH,IAAI,gBAAgB,CALhB,SAAA,GAAY,CAAA,CAAE,IAAC,CAAI,KAAC,CAAK,GAAC,CAAG,CAAC;gBAMlC,IAAI,gBAAgB,CALhB,IAAA,GAAO,CAAA,CAAE,IAAC,CAAI;gBAMlB,IAAI,SALC,CAAS,MAAC,GAAQ,CAAA,EAAG;oBAMtB,YAAY,CALC,SAAC,CAAS,CAAC,CAAC,CAAC,GAAG,EAAA,CAAG;oBAMhC,SAAS,CALC,UAAC,CAAU,SAAC,CAAS,CAAC,CAAC,EAAE,IAAI,WAAA,CAAY,EAAC,EAAG,YAAA,CAAa,SAAC,CAAS,CAAC,CAAC,CAAC,EAAE,EAAA,EAAI,SAAA,CAAU,CAAC,CAAC;oBAMnG,SAAS,GALC,gBAAA,CAAA,CAAE,SAAA,CAAU,QAAC,CAAQ,SAAC,CAAS,CAAC,CAAC,CAAK,CAAA,CAAY;oBAM5D,IAAI,GALG,SAAA,CAAU,CAAC,CAAC,CAAC;iBAMvB;;oBACG,SAAS,GALC,gBAAA,CAAA,CAAE,eAAA,CAAgB,gBAAC,CAAgB,SAAC,CAAa,CAAA,CAAY;gBAM3E,IAAI,gBAAgB,CALhB,aAAA,GAAgB,IAAA,CAAK,uBAAC,CAAuB,CAAC,EAAE,WAAA,EAAa,YAAA,EAAc,IAAA,CAAK,CAAC;gBAMrF,SAAS,CALC,UAAC,CAAU,IAAC,EAAK,aAAA,CAAc,WAAC,CAAW,CAAC;gBAMtD,gBAAgB,CALC,IAAC,CAAI,aAAC,CAAa,CAAA;aAMvC;QACL,CAAC,CALC,CAAC;QAMH,IAAI,IALC,CAAI,iBAAC,CAAiB,gBAAC;YAMxB,IAAI,CALC,iBAAC,CAAiB,gBAAC,CAAgB,OAAC,CAAO,CAAC,CAAC,EAAA,CAAG,IAAA,CAAK,gBAAC,CAAgB,CAAC,EAAE,WAAA,CAAY,CAAC,CAAC;QAMhG,IAAI,CALC,mBAAC,CAAmB,WAAC,CAAW,CAAC;QAMtC,OALO;YAMH,cAAc,EALE,WAAA;YAMhB,SAAS,EALC,gBAAA,CAAA,CAAC,eAAA,CAAgB,gBAAC,CAAgB,SAAC,CAAa,CAAA;SAM7D,CALC;IAMN,CAAC;IACL;;;OAGG;IANE,mBAAA,CAAA,WAAA;QAQG,KAAK,IAPC,gBAAA,CAAG,MAAA,IAAU,WAAA;YAQf,IAAI,KAPC,CAAK,OAAC,CAAO,WAAC,CAAW,MAAC,CAAM,CAAC;gBAQlC,WAAW,CAPC,MAAC,CAAM,CAAC,OAAC,CAAO,CAAC,CAAC,EAAA,CAAG,IAAA,CAAK,mBAAC,CAAmB,CAAC,CAAC,CAAC,CAAC;iBAC7D;gBAQD,WAAW,CAPC,MAAC,CAAM,CAAC,eAAC,GAAiB,IAAA,CAAK,iBAAC,CAAiB,CAAA,CAAG,IAAA,CAAK,iBAAC,CAAiB,eAAC,CAAe,CAAA,CAAE,KAAA,CAAM;gBAQ/G,WAAW,CAPC,MAAC,CAAM,CAAC,QAAC,EAAQ,CAAE;aAQlC;IAET,CAAC;IACL;;;;;;OAMG;IAZE,eAAA,CAAA,WAAA,EAAA,KAAA,EAAA,SAAA,EAAA,YAAA;QAcG,WAAW,CAbC,KAAC,CAAK,IAAC,CAAI,GAAG,EAAA,CAAG;QAc7B,YAAY,CAbC,KAAC,CAAK,IAAC,CAAI,GAAG,EAAA,CAAG;QAc9B,IAAI,gBAAgB,CAbhB,SAAA,GAAY,IAAI,WAAA,CAAY,YAAC,CAAY,KAAC,CAAK,IAAC,CAAI,EAAE,EAAA,CAAG,CAAC;QAe9D,IAAI,KAbC,CAAK,cAAC,EAAe;YActB,IAAI,KAbC,CAAK,IAAC;gBAcX,KAAK,CAbC,IAAC,CAAI,OAAC,CAAO,GAAC,CAAG,EAAA;oBAcnB,SAAS,CAbC,QAAC,CAAQ,IAAC,CAAI,IAAC,CAAI,sBAAC,CAAsB,KAAC,EAAM,WAAA,CAAY,KAAC,CAAK,IAAC,CAAI,EAAE,IAAA,CAAK,YAAC,CAAY,YAAC,CAAY,KAAC,CAAK,IAAC,CAAI,CAAC,EAAE,GAAA,CAAI,CAAC,CAAC;gBAc3I,CAAC,CAbC,CAAA;YAcF,IAAI,KAbC,CAAK,kBAAC,IAAqB,KAAA,CAAM,kBAAC,GAAoB,CAAA,EAAG;gBAc1D,IAAI,gBAAgB,CAbhB,SAAA,GAAY,KAAA,CAAM,kBAAC,GAAoB,CAAA,SAAE,CAAS,QAAC,CAAQ,MAAC,CAAM,CAAA;gBActE,KAAK,IAbC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,SAAA,EAAW,CAAA,EAAE;oBAc7B,SAAS,CAbC,QAAC,CAAQ,IAAC,CAAI,IAAC,CAAI,sBAAC,CAAsB,KAAC,EAAM,WAAA,CAAY,KAAC,CAAK,IAAC,CAAI,EAAE,IAAA,CAAK,YAAC,CAAY,YAAC,CAAY,KAAC,CAAK,IAAC,CAAI,CAAC,EAAE,EAAE,MAAA,EAAQ,EAAA,EAAG,CAAE,CAAC,CAAC;aAczJ;YACD,IAAI,CAbC,UAAC,CAAU,WAAC,CAAW,KAAC,CAAK,IAAC,CAAI,EAAE,KAAA,EAAO,YAAA,CAAa,KAAC,CAAK,IAAC,CAAI,EAAE,SAAA,CAAU,CAAC;YAcrF,SAAS,CAbC,UAAC,CAAU,KAAC,CAAK,IAAC,EAAK,SAAA,CAAU,CAAC;SAc/C;IACL,CAAC;IACL;;;OAGG;IAfE,YAAA,CAAA,YAAA;QAiBG,IAAI,gBAAgB,CAhBhB,OAAA,GAAU,EAAA,CAAG;QAiBjB,YAAY,CAhBC,IAAC,CAAI,OAAC,CAAO,CAAC;QAiB3B,OAhBO,OAAA,CAAQ;IAiBnB,CAAC;IACL;;;;;;OAMG;IApBE,UAAA,CAAA,WAAA,EAAA,CAAA,EAAA,YAAA,EAAA,SAAA;QAsBG,WAAW,CArBC,SAAC,CAAS,OAAC,GAAS,GAAG,EAAA;YAsB/B,SAAS,CArBC,QAAC,CAAQ,IAAC,CAAI,IAAC,CAAI,sBAAC,CAAsB,CAAC,EAAE,WAAA,EAAa,IAAA,CAAK,YAAC,CAAY,YAAC,CAAY,EAAE,EAAE,MAAA,EAAQ,EAAA,EAAG,CAAE,CAAC,CAAC;QAsB1H,CAAC,CAAA;QAED,WAAW,CArBC,SAAC,CAAS,UAAC,GAAY,CAAA,KAAQ,EAAQ,EAAA;YAsB/C,SAAS,CArBC,QAAC,CAAQ,KAAC,CAAK,CAAC;YAsB1B,WAAW,CArBC,MAAC,CAAM,KAAC,EAAM,CAAA,CAAE,CAAC;QAsBjC,CAAC,CAAA;IACL,CAAC;IACL;;;;;;OAMG;IA1BE,sBAAA,CAAA,CAAA,EAAA,WAAA,EAAA,YAAA,EAAA,GAAA;QA4BG,IAAI,gBAAgB,CA3BhB,eAAA,GAAkB,IAAI,WAAA,CAAY,EAAC,EAAG,YAAA,EAAc,EAAA,EAAI,SAAA,CAAU,CAAC;QA4BvE,IAAI,gBAAgB,CA3BhB,OAAA,GAAU,EAAA,CAAG;QA4BjB,WAAW,CA3BC,IAAC,CAAI,OAAC,CAAO,CAAC;QA4B1B,MAAM,CA3BC,IAAC,CAAI,CAAC,CAAC,cAAC,CAAc,CAAC,OAAC,CAAO,GAAC,CAAG,EAAA;YA4BtC,IAAI,gBAAgB,CA3BhB,KAAA,GAAQ,GAAA,CAAI,MAAC,CAAM,MAAC,CAAM,CAAC,CAAC,EAAA,CAAG,CAAA,CAAE,IAAC,IAAO,GAAA,CAAI,CAAC,CAAC,CAAC,CAAC;YA4BrD,IAAI,gBAAgB,CA3BhB,iBAAA,qBAAsB,CAAI,CAAC,cAAC,CAAc,GAAC,CAAG,EAAE,EAAK,IAAA,EAAM,GAAA,EAAI,CAAE,CAAE;YA4BvE,IAAI,KA3BC;gBA4BD,iBAAiB,qBA3BK,iBAAI,EAAkB,KAAI,CAAK,CAAE;YA4B3D,IAAI,gBAAgB,CA3BhB,aAAA,GAAgB,IAAA,CAAK,uBAAC,CAAuB,iBAAC,EAAkB,OAAA,EAAS,YAAA,EAAc,GAAA,CAAI,CAAC;YA4BhG,eAAe,CA3BC,UAAC,CAAU,GAAC,EAAI,aAAA,CAAc,WAAC,CAAW,CAAC;QA4B/D,CAAC,CA3BC,CAAA;QA4BF,OA3BO,eAAA,CAAgB;IA4B3B,CAAC;IACL;;;;OAIG;IA9BE,gBAAA,CAAA,CAAA,EAAA,WAAA;QAgCG,IAAI,gBAAgB,CA/BhB,WAAA,GAAc,CAAA,CAAE,CAAC,SAAC,CAAS,IAAI,IAAA,CAAK,iBAAC,IAAoB,IAAA,CAAK,iBAAC,CAAiB,mBAAC,CAAmB,CAAA,CAAE,IAAA,CAAK,iBAAC,CAAiB,mBAAC,CAAmB,MAAC,CAAM,CAAC,CAAC,EAAE,EAAA,CAAG,CAAA,CAAE,SAAC,IAAY,CAAA,CAAE,SAAC,CAAS,CAAC,CAAC,CAAC,CAAC,CAAA,CAAE,SAAA,CAAU;QAgC9M,IAAI,gBAAgB,CA/BhB,cAAA,GAAiB,CAAA,CAAE,EAAE,WAAA,CAAY,CAAC;QAgCtC,IAAI,gBAAgB,CA/BhB,KAAA,GAAQ,SAAA,CAAU;QAgCtB,IAAI,WA/BC,EAAY;YAgCb,KAAK,GA/BG,WAAA,CAAY,KAAC,CAAK;YAgC1B,IAAI,WA/BC,CAAW,SAAC;gBAgCb,WAAW,CA/BC,SAAC,CAAS,OAAC,CAAO,CAAC,CAAC,EAAA,CAAG,cAAA,CAAe,IAAC,CAAI,CAAC,CAAC,CAAC,CAAC;SAgClE;;YACG,KAAK,GA/BG,iBAAA,CAAkB;QAgC9B,IAAI,gBAAgB,CA/BhB,aAAA,GAAgB,WAAA,CAAY,KAAC,EAAM,cAAA,CAAe,CAAC;QAgCvD,WAAW,CA/BC,CAAC,CAAC,IAAC,CAAI,GAAG,aAAA,CAAc;QAgCpC,OA/BO,aAAA,CAAA;IAgCX,CAAC;IACL;;;;;;OAMG;IApCE,uBAAA,CAAA,CAAA,EAAA,WAAA,EAAA,YAAA,EAAA,IAAA;QAsCG,IAAI,gBAAgB,CArChB,aAAA,GAAgB,IAAA,CAAK,gBAAC,CAAgB,CAAC,EAAE,WAAA,CAAY,CAAC;QAsC1D,IAAI,gBAAgB,CArChB,UAAA,GAA4B,EAAA,CAAG;QAsCnC,IAAI,gBAAgB,CArChB,eAAA,GAAsC,EAAA,CAAG;QAsC7C,IAAI,CArCC,CAAC,UAAC;YAsCH,IAAI,CArCC,iBAAC,CAAiB,UAAC,EAAW,CAAA,CAAE,UAAC,CAAU,CAAC;QAsCrD,IAAI,aArCC,CAAa,SAAC;YAsCf,UAAU,CArCC,IAAC,CAAI,aAAC,CAAa,SAAC,CAAS,IAAC,CAAI,aAAC,CAAa,CAAC,CAAC;QAsCjE,IAAI,aArCC,CAAa,cAAC;YAsCf,eAAe,CArCC,IAAC,CAAI,aAAC,CAAa,cAAC,CAAc,IAAC,CAAI,aAAC,CAAa,CAAC,CAAC;QAsC3E,IAAI,aArCC;YAsCD,YAAY,CArCC,CAAC,CAAC,IAAC,CAAI,GAAG,CAAA,CAAE,KAAC,CAAK;QAsCnC,IAAI,gBAAgB,CArChB,UAAA,GAAa,EAAA,CAAG;QAsCpB,UAAU,CArCC,CAAC,CAAC,IAAC,CAAI,GAAG,CAAA,CAAE,KAAC,CAAK;QAsC7B,YAAY,CArCC,CAAC,CAAC,IAAC,CAAI,GAAG,CAAA,CAAE,KAAC,CAAK;QAsC/B,aAAa,CArCC,WAAC,GAAa,IAAI,aAAA,CAAc,CAAC,CAAC,KAAC,EAAM,UAAA,EAAY,eAAA,EAAiB,YAAA,EAAc,UAAA,EAAY,IAAA,EAAM,SAAA,CAAU,CAAC;QAsC/H,OArCO,aAAA,CAAc;IAsCzB,CAAC;IACL;;;;OAIG;IAxCE,iBAAA,CAAA,WAAA,EAAA,gBAAA;QA0CG,KAAK,IAzCC,gBAAA,CAAG,MAAA,IAAU,eAAA,EAAiB;YA0ChC,IAAI,gBAzCC,CAAgB,MAAC,CAAM,EAAE;gBA0C1B,WAAW,CAzCC,IAAC,CAAI,eAAC,CAAe,MAAC,CAAM,CAAC,gBAAC,CAAgB,MAAC,CAAM,CAAC,CAAC,CAAC;aA0CvE;SACJ;QACD,OAzCO,WAAA,CAAY;IA0CvB,CAAC;CACJ;AAED;IACA,gBAAgB;IAChB,oBAAoB,CAAC,SAAS,CAAC,iBAAiB,CAAC;AACjD,CAAC","file":"dynamic-form-builder.js","sourceRoot":"","sourcesContent":["import { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\n\nimport { RxFormGroup, RxFormArray, RxFormControl, RxwebValidators } from '@rxweb/reactive-form-validators';\nimport { DynamicFormConfiguration } from '../models/interface';\nimport { FormControlConfig } from './form-control-config';\nimport { getInstance } from '../functions/get-instance.function';\nimport { DynamicFormBuildConfig } from '../models/interface/dynamic-form-build-config';\nimport { ApplicationUtil } from '../util/application-util';\n\nconst /** @type {?} */ ARRAY: string = \"array\";\nexport class RxDynamicFormBuilder {\n    formConfiguration: DynamicFormConfiguration;\n/**\n * @param {?} fields\n * @param {?} dynamicFormConfig\n * @return {?}\n */\nformGroup(fields: any[], dynamicFormConfig: DynamicFormConfiguration): DynamicFormBuildConfig {\n        this.formConfiguration = dynamicFormConfig;\n        let /** @type {?} */ entityObject: { [key: string]: any } = {};\n        let /** @type {?} */ formFieldConfigs = new Array<FormControlConfig>();\n        let /** @type {?} */ modelConfig = {};\n        let /** @type {?} */ formGroup = new RxFormGroup({}, entityObject, {}, undefined);\n        fields.forEach((x, i) => {\n            if (x.type == ARRAY) {\n                this.createFormArray(modelConfig, x, /** @type {?} */(( ApplicationUtil.getRootFormGroup(formGroup) as RxFormGroup)), entityObject);\n            } else {\n                let /** @type {?} */ splitName = x.name.split('.');\n                let /** @type {?} */ name = x.name;\n                if (splitName.length > 1) {\n                    entityObject[splitName[0]] = {};\n                    formGroup.addControl(splitName[0], new RxFormGroup({}, entityObject[splitName[0]], {}, undefined));\n                    formGroup = /** @type {?} */(( formGroup.controls[splitName[0]] as RxFormGroup));\n                    name = splitName[1];\n                } else\n                    formGroup = /** @type {?} */(( ApplicationUtil.getRootFormGroup(formGroup) as RxFormGroup));\n                let /** @type {?} */ modelInstance = this.getDynamicModelInstance(x, modelConfig, entityObject, name);\n                formGroup.addControl(name, modelInstance.formControl);\n                formFieldConfigs.push(modelInstance)\n            }\n        });\n        if (this.formConfiguration.additionalConfig)\n            this.formConfiguration.additionalConfig.forEach(t => this.getModelInstance(t, modelConfig));\n        this.completeModelConfig(modelConfig);\n        return  {\n            controlsConfig: modelConfig,\n            formGroup: /** @type {?} */(( ApplicationUtil.getRootFormGroup(formGroup) as RxFormGroup))\n        };\n    }\n/**\n * @param {?} modelConfig\n * @return {?}\n */\nprivate completeModelConfig(modelConfig:any) {\n        for (var /** @type {?} */ column in modelConfig)\n            if (Array.isArray(modelConfig[column]))\n                modelConfig[column].forEach(x => this.completeModelConfig(x));\n            else {\n                modelConfig[column].isPlainTextMode = this.formConfiguration  ? this.formConfiguration.isPlainTextMode : false;\n                modelConfig[column].complete();\n            }\n            \n    }\n/**\n * @param {?} modelConfig\n * @param {?} field\n * @param {?} formGroup\n * @param {?} entityObject\n * @return {?}\n */\nprivate createFormArray(modelConfig: any, field: { [key: string]: any }, formGroup: RxFormGroup, entityObject: {[key:string]:any}) {\n        modelConfig[field.name] = [];\n        entityObject[field.name] = [];\n        let /** @type {?} */ formArray = new RxFormArray(entityObject[field.name], []);\n        \n        if (field.controlConfigs) {\n            if (field.rows)\n            field.rows.forEach(row => {\n                formArray.controls.push(this.createDynamicFormGroup(field, modelConfig[field.name], this.getRefObject(entityObject[field.name]), row));\n            })\n            if (field.minimumRepeatCount && field.minimumRepeatCount > 0) {\n                let /** @type {?} */ countLeft = field.minimumRepeatCount - (formArray.controls.length)\n                for (var /** @type {?} */ i = 0; i < countLeft; i++)\n                    formArray.controls.push(this.createDynamicFormGroup(field, modelConfig[field.name], this.getRefObject(entityObject[field.name]), { fields: [] }));\n            }\n            this.addTwoProp(modelConfig[field.name], field, entityObject[field.name], formArray);\n            formGroup.addControl(field.name, formArray);\n        }\n    }\n/**\n * @param {?} entityObject\n * @return {?}\n */\nprivate getRefObject(entityObject:any[]) {\n        let /** @type {?} */ jObject = {};\n        entityObject.push(jObject);\n        return jObject;\n    }\n/**\n * @param {?} modelConfig\n * @param {?} x\n * @param {?} entityObject\n * @param {?} formArray\n * @return {?}\n */\nprivate addTwoProp(modelConfig: any, x, entityObject, formArray) {\n        modelConfig.__proto__.addItem = () => {\n            formArray.controls.push(this.createDynamicFormGroup(x, modelConfig, this.getRefObject(entityObject), { fields: [] }));\n        }\n\n        modelConfig.__proto__.removeItem = (index: number) => {\n            formArray.removeAt(index);\n            modelConfig.splice(index, 1);\n        }\n    }\n/**\n * @param {?} x\n * @param {?} modelConfig\n * @param {?} entityObject\n * @param {?} row\n * @return {?}\n */\nprivate createDynamicFormGroup(x, modelConfig, entityObject, row) {\n        let /** @type {?} */ nestedFormGroup = new RxFormGroup({}, entityObject, {}, undefined);\n        let /** @type {?} */ jObject = {};\n        modelConfig.push(jObject);\n        Object.keys(x.controlConfigs).forEach(key => {\n            let /** @type {?} */ field = row.fields.filter(x => x.name == key)[0];\n            let /** @type {?} */ formControlConfig = { ...x.controlConfigs[key], ...{ name: key } };\n            if (field)\n                formControlConfig = { ...formControlConfig, ...field };\n            let /** @type {?} */ modelInstance = this.getDynamicModelInstance(formControlConfig, jObject, entityObject, key);\n            nestedFormGroup.addControl(key, modelInstance.formControl);\n        })\n        return nestedFormGroup;\n    }\n/**\n * @param {?} x\n * @param {?} modelConfig\n * @return {?}\n */\nprivate getModelInstance(x,modelConfig) {\n        let /** @type {?} */ configModel = (x.modelName) && this.formConfiguration && this.formConfiguration.controlConfigModels ? this.formConfiguration.controlConfigModels.filter((y) => y.modelName == x.modelName)[0] : undefined;\n        let /** @type {?} */ modelArguments = [x, modelConfig];\n        let /** @type {?} */ model = undefined;\n        if (configModel) {\n            model = configModel.model;\n            if (configModel.arguments)\n                configModel.arguments.forEach(t => modelArguments.push(t));\n        } else\n            model = FormControlConfig;\n        let /** @type {?} */ modelInstance = getInstance(model, modelArguments);\n        modelConfig[x.name] = modelInstance;\n        return modelInstance\n    }\n/**\n * @param {?} x\n * @param {?} modelConfig\n * @param {?} entityObject\n * @param {?} name\n * @return {?}\n */\nprivate getDynamicModelInstance(x, modelConfig, entityObject, name) {\n        let /** @type {?} */ modelInstance = this.getModelInstance(x, modelConfig);\n        let /** @type {?} */ validators: ValidatorFn[] = [];\n        let /** @type {?} */ asyncValidators: AsyncValidatorFn[] = [];\n        if (x.validators)\n            this.validatorBindings(validators, x.validators);\n        if (modelInstance.validator)\n            validators.push(modelInstance.validator.bind(modelInstance));\n        if (modelInstance.asyncValidator)\n            asyncValidators.push(modelInstance.asyncValidator.bind(modelInstance));\n        if (modelInstance)\n            entityObject[x.name] = x.value;\n        let /** @type {?} */ baseObject = {};\n        baseObject[x.name] = x.value;\n        entityObject[x.name] = x.value;\n        modelInstance.formControl = new RxFormControl(x.value, validators, asyncValidators, entityObject, baseObject, name, undefined);\n        return modelInstance;\n    }\n/**\n * @param {?} validations\n * @param {?} validationConfig\n * @return {?}\n */\nprivate validatorBindings(validations: any[], validationConfig: any) {\n        for (var /** @type {?} */ column in RxwebValidators) {\n            if (validationConfig[column]) {\n                validations.push(RxwebValidators[column](validationConfig[column]));\n            }\n        }\n        return validations;\n    }\n}\n\nfunction RxDynamicFormBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nRxDynamicFormBuilder.prototype.formConfiguration;\n}\n"]}